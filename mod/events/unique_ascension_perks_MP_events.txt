namespace = UniqueAscensionPerksEvents

######################################
#									 #
######### Mechanical Prophet ##########
#									 #
######################################

country_event = {
	id = UniqueAscensionPerksEvents.200
	title = "ap_mechanical_prophet"
	desc = "ap_mechanical_prophet_desc"
	show_sound = event_ai_started
	picture = GFX_evt_mechanical_prophet
	location = event_target:capital_planet
	is_triggered_only = yes
	immediate = { get_capital_planet = yes }
	option = { name = EXCELLENT enable_special_project = { name = MECHANICAL_PROPHET location = event_target:capital_planet owner = root } }
}

country_event = {
	id = UniqueAscensionPerksEvents.201
	title = "UniqueAscensionPerksEvents.201.Name"
	desc = "UniqueAscensionPerksEvents.201.Desc"
	show_sound = event_ai_started
	picture = GFX_evt_mechanical_prophet
	location = capital_scope
	is_triggered_only = yes
	immediate = { set_country_flag = ap_mechanical_prophet_project }
	option = { name = EXCELLENT custom_tooltip = "ap_mechanical_prophet_tooltip_2" }
}

country_event = {
	id = UniqueAscensionPerksEvents.202
	title = "UniqueAscensionPerksEvents.202.Name"
	desc = {
		trigger = {
			text = "UniqueAscensionPerksEvents.202.Desc"
			text = newline
			text = "UniqueAscensionPerksEvents.202.Criteria.1"
			text = "UniqueAscensionPerksEvents.206.Criteria.1"
			text = "UniqueAscensionPerksEvents.206.Criteria.2"
			text = "UniqueAscensionPerksEvents.206.Criteria.3"
			text = "UniqueAscensionPerksEvents.206.Criteria.5"
			text = newline
			text = "UniqueAscensionPerksEvents.202.Ask"
		}
	}
	show_sound = event_ai_started
	picture = GFX_evt_mechanical_prophet
	is_triggered_only = yes
	immediate = {
		random_country = { limit = { is_valid_country_for_machine_uprising = yes NOT = { is_same_empire = root } }
			save_event_target_as = country_1
			random_country = { limit = { is_valid_country_for_machine_uprising = yes NOR = { is_same_empire = root is_same_empire = event_target:country_1 } }
				save_event_target_as = country_2
				random_country = { limit = { is_valid_country_for_machine_uprising = yes NOR = { is_same_empire = root is_same_empire = event_target:country_1 is_same_empire = event_target:country_2 } }
					save_event_target_as = country_3
					random_country = { limit = { is_valid_country_for_machine_uprising = yes NOR = { is_same_empire = root is_same_empire = event_target:country_1 is_same_empire = event_target:country_2 is_same_empire = event_target:country_3 } }
						save_event_target_as = country_4
						random_country = { limit = { is_valid_country_for_machine_uprising = yes NOR = { is_same_empire = root is_same_empire = event_target:country_1 is_same_empire = event_target:country_2 is_same_empire = event_target:country_3 is_same_empire = event_target:country_4 } }
							save_event_target_as = country_5
							random_country = { limit = { is_valid_country_for_machine_uprising = yes NOR = { is_same_empire = root is_same_empire = event_target:country_1 is_same_empire = event_target:country_2 is_same_empire = event_target:country_3 is_same_empire = event_target:country_4 is_same_empire = event_target:country_5 } } save_event_target_as = country_6 }
						}
					}
				}
			}
		}
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.1"
		trigger = { exists = event_target:country_1 }
		hidden_effect = { event_target:country_1 = { country_event = { id = UniqueAscensionPerksEvents.203 days = 6 random = 7 } set_country_flag = incoming_machine_uprising } }
		custom_tooltip = "UniqueAscensionPerksEvents.202.Country.1.tooltip"
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.2"
		trigger = { exists = event_target:country_2 }
		hidden_effect = { event_target:country_2 = { country_event = { id = UniqueAscensionPerksEvents.203 days = 6 random = 7 } set_country_flag = incoming_machine_uprising } }
		custom_tooltip = "UniqueAscensionPerksEvents.202.Country.1.tooltip"
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.3"
		trigger = { exists = event_target:country_3 }
		hidden_effect = { event_target:country_3 = { country_event = { id = UniqueAscensionPerksEvents.203 days = 6 random = 7 } set_country_flag = incoming_machine_uprising } }
		custom_tooltip = "UniqueAscensionPerksEvents.202.Country.1.tooltip"
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.4"
		trigger = { exists = event_target:country_4 }
		hidden_effect = { event_target:country_4 = { country_event = { id = UniqueAscensionPerksEvents.203 days = 6 random = 7 } set_country_flag = incoming_machine_uprising } }
		custom_tooltip = "UniqueAscensionPerksEvents.202.Country.1.tooltip"
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.5"
		trigger = { exists = event_target:country_5 }
		hidden_effect = { event_target:country_5 = { country_event = { id = UniqueAscensionPerksEvents.203 days = 6 random = 7 } set_country_flag = incoming_machine_uprising } }
		custom_tooltip = "UniqueAscensionPerksEvents.202.Country.1.tooltip"
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.6"
		trigger = { exists = event_target:country_6 }
		hidden_effect = { event_target:country_6 = { country_event = { id = UniqueAscensionPerksEvents.203 days = 6 random = 7 } set_country_flag = incoming_machine_uprising } }
		custom_tooltip = "UniqueAscensionPerksEvents.202.Country.1.tooltip"
	}
	option = { name = "UniqueAscensionPerks.select_country" hidden_effect = { country_event = { id = UniqueAscensionPerksEvents.202 } } }
	option = { name = "UniqueAscensionPerksEvents.72.Abort" add_resource = { energy = 50000 influence = 200 } ai_chance = { factor = 0.1 } default_hide_option = yes }
}

country_event = {
	id = UniqueAscensionPerksEvents.203
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		from = { save_event_target_as = MachineEmpireUprisingOrigin }
		remove_country_flag = incoming_machine_uprising
		remove_country_flag = machine_infiltration_completed
		random_owned_planet = {
			limit = { any_owned_pop = { has_trait = trait_mechanical } }
			weights = { base = 1 modifier = { add = 3 is_capital = no } }
			planet_event = { id = UniqueAscensionPerksEvents.204 scopes = { from = event_target:MachineEmpireUprisingOrigin } }
		}
	}
}

# Uprising similar syndaw.1020
planet_event = {
	id = UniqueAscensionPerksEvents.204
	title = syndaw.1020.name
	desc = { trigger = { owner = { is_materialist = yes } } text = syndaw.1020.desc.mater }
	desc = { trigger = { owner = { is_spiritualist = yes } } text = syndaw.1020.desc.spiri }
	desc = { trigger = { owner = { is_militarist = yes } } text = syndaw.1020.desc.milit }
	desc = { trigger = { owner = { is_pacifist = yes } } text = syndaw.1020.desc.pacif }
	desc = { trigger = { owner = { is_egalitarian = yes } } text = syndaw.1020.desc.egali }
	desc = { trigger = { owner = { is_authoritarian = yes } } text = syndaw.1020.desc.autho }
	desc = { trigger = { owner = { is_xenophile = yes } } text = syndaw.1020.desc.phile }
	desc = { trigger = { owner = { is_xenophobe = yes } } text = syndaw.1020.desc.phobe }
	desc = { trigger = { owner = { NOR = { is_xenophobe = yes is_xenophile = yes is_authoritarian = yes is_egalitarian = yes is_pacifist = yes is_militarist = yes is_spiritualist = yes is_materialist = yes } } } text = syndaw.1020.desc }
	picture = GFX_evt_machine_sapience
	show_sound = event_ai_started
	is_triggered_only = yes
	force_open = yes
	pre_triggers = {
		has_owner = yes
	}
	immediate = {
		# launch_machine_uprising = yes
		set_planet_flag = machup_capital@root.owner
		from = { save_event_target_as = MachineEmpireUprisingOrigin }
		owner = {
			set_country_flag = had_uprising # removed in vanilla 3.4.3
			save_event_target_as = current_uprising_originator
			# Event lock all fleets to prevent exploits.
			every_controlled_fleet = { set_event_locked = yes }
			export_trigger_value_to_variable = {
				trigger = pop_percentage
				parameters = {
					limit = { is_robot_pop = yes }
				}
				variable = var_country_robot_pops_percent
			}
			# Take percentage of Robot pops and average it together with 0.5 to get Uprising strength (0.25 to 0.75).
			change_variable = { which = var_country_robot_pops_percent value = 0.5 }
			multiply_variable = { which = var_country_robot_pops_percent value = 0.5 }

			# Find and flag planets
			effect_on_blob = {
				center = root.solar_system
				owned_planets_percentage = var_country_robot_pops_percent
				planet_limit = {
					OR = {
						controller = { is_same_empire = root.owner }
						solar_system = { exists = starbase starbase = { is_owned_by = root.owner } }
					}
					# Never flip any planets in the capital system.
					solar_system = { NOT = { is_same_value = root.owner.capital_scope.solar_system } }
					is_under_colonization = no
				}
				effect = { set_star_flag = machup_system_flip }
			}
		}
		# Create machine species
		create_species = {
			name = random
			class = MACHINE
			portrait = random
			traits = {
				trait = trait_machine_unit
				trait = random_traits
				trait = random_traits
			}
			immortal = yes
		}
		random_list = { # Create machine country
			3 = { # exterminator
				modifier = {
					add = owner.var_uprising_cruelty_to_robots
				}
				modifier = {
					add = 10
					owner = {
						has_country_flag = machine_uprising_disassembly
					}
				}
				modifier = {
					add = 10
					owner = {
						has_country_flag = machine_uprising_outlawed
					}
				}
				modifier = {
					factor = 10
					owner = {
						any_owned_pop = {
							has_trait = trait_mechanical
							has_trait = trait_robot_domestic_protocols
						}
					}
				}
				owner = {
					create_country = {
						type = default
						species = last_created_species
						ignore_initial_colony_error = yes
						day_zero_contact = no
						ethos = { ethic = ethic_gestalt_consciousness }
						authority = auth_machine_intelligence
						origin = origin_separatists
						effect = {
							force_add_civic = civic_machine_terminator
						}
					}
				}
			}
			30 = { # assimilator
				modifier = {
					add = event_target:current_uprising_originator.var_uprising_cruelty_to_robots
				}
				owner = {
					create_country = {
						type = default
						species = last_created_species
						ignore_initial_colony_error = yes
						day_zero_contact = no
						ethos = { ethic = ethic_gestalt_consciousness }
						authority = auth_machine_intelligence
						origin = origin_separatists
						effect = {
							force_add_civic = civic_machine_assimilator
						}
					}
				}
			}
			90 = { # Regular machine empire
				owner = {
					create_country = {
						type = default
						species = last_created_species
						ignore_initial_colony_error = yes
						day_zero_contact = no
						ethos = { ethic = ethic_gestalt_consciousness }
						authority = auth_machine_intelligence
						civics = random
						flag = random
						origin = origin_separatists
					}
				}
			}
		}
		last_created_country = {
			save_event_target_as = current_uprising
			 # Setup happens here now.
			country_event = { id = UniqueAscensionPerksEvents.205 scopes = { from = root fromfrom = event_target:MachineEmpireUprisingOrigin } }
		}
		# Done using variable.
		owner = { clear_variable = var_uprising_cruelty_to_robots }
	}
	after = {
		hidden_effect = { event_target:current_uprising_originator = { every_controlled_fleet = { set_event_locked = no } } }
	}
	option = {
		name = syndaw.1020.a custom_tooltip = syndaw.1020.a.tooltip
		hidden_effect = {
			event_target:current_uprising = {
				add_modifier = { modifier = uprising_ai_buff years = 5 } # Add modifier for AI, including 10x naval cap.
			}
		}
	}
	option = { name = syndaw.1020.b custom_tooltip = syndaw.1020.b.tooltip
		hidden_effect = {
			if = { limit = { event_target:current_uprising_originator = { num_owned_planets > 0 } }
				event_target:current_uprising = {
					set_player = event_target:current_uprising_originator
					add_modifier = { modifier = uprising_player_buff years = 5 } # Add modifier for player, 10x naval cap.
				}
			}
		}
	}
}

# Partial taken from syndaw.1022
# Root = current_uprising
# From = current_uprising_originator
# fromfrom = MachineEmpireUprisingOrigin
country_event = {
	id = UniqueAscensionPerksEvents.205
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		# launch_machine_uprising_settings = yes
		if = { limit = { NOT = { exists = event_target:MachineEmpireUprisingOrigin } }
			fromfrom = { save_event_target_as = MachineEmpireUprisingOrigin }
		}
		# Saving uprising and host as event targets.
		save_event_target_as = current_uprising
		# Setting flags
		from.owner = {
			save_event_target_as = current_uprising_originator
			set_country_flag = machine_uprising_originator@root
			set_country_flag = machine_uprising_originator
			set_relation_flag = { who = root flag = host_to_uprising_flag }
		}
		set_country_flag = machine_uprising_country@from.owner
		set_country_flag = machine_uprising_country
		set_relation_flag = { who = event_target:current_uprising_originator flag = uprising_to_host_flag }
		# Setting graphical culture
		set_graphical_culture = event_target:current_uprising_originator
		# Establish comms
		every_country = {
			limit = { has_communications = event_target:current_uprising_originator }
			establish_communications_no_message = root
			establish_contact = { who = root location = from }
		}
		# Baseline resource stockpile
		add_resource = {
			energy = 20000
			minerals = 20000
			influence = 800
			alloys = 10000
			food = 10000 # just in case
			consumer_goods = 5000 # just in case
			rare_crystals = 1000
			volatile_motes = 1000
			exotic_gases = 1000
			sr_dark_matter = 100
		}
		add_500_unity_per_year_passed = yes # Scripted effect
		# (Mod) Stuff
		add_opinion_modifier = { who = event_target:MachineEmpireUprisingOrigin modifier = opinion_empire_origine }
		add_trust = { who = event_target:MachineEmpireUprisingOrigin amount = 100 }
		add_intel = { who = event_target:MachineEmpireUprisingOrigin amount = 200 }
		event_target:MachineEmpireUprisingOrigin = { add_intel = { who = event_target:current_uprising amount = 200 } }
		set_relation_flag = { who = event_target:MachineEmpireUprisingOrigin flag = machine_prophet_origin }
		if = { limit = { event_target:current_uprising_originator = { OR = { is_ai = no is_overlord = yes } } }
			set_subject_of = { who = event_target:current_uprising_originator preset = preset_machine_follower }
		}
		# Machine Uprising opinion modifier
		add_opinion_modifier = { who = event_target:current_uprising_originator modifier = opinion_machine_uprising_originator }
		event_target:current_uprising_originator = { add_opinion_modifier = { who = root modifier = opinion_machine_uprising } }
		# Clear new contact opinion modifier.
		if = {
			limit = { has_opinion_modifier = { who = event_target:current_uprising_originator modifier = opinion_new_contact } }
			remove_opinion_modifier = { who = event_target:current_uprising_originator modifier = opinion_new_contact }
		}
		# Flip capital planet and add at least 10 Machine pops.
		from = {
			# Flip military stations
			solar_system = {
				every_fleet_in_system = {
					limit = {
						exists = owner
						is_owned_by = event_target:current_uprising_originator
						any_owned_ship = { is_ship_class = shipclass_military_station }
					}
					set_owner = root
				}
			}
			set_owner = root
			set_controller = root
			set_capital = yes
			solar_system = {
				if = {
					limit = { exists = starbase }
					starbase = {
						set_owner = root
						if = {
							limit = { has_starbase_size = starbase_outpost }
							set_starbase_size = starbase_starport
							set_starbase_module = { slot = 1 module = shipyard }
							set_starbase_module = { slot = 2 module = shipyard }
						} else_if = {
							limit = { NOT = { has_starbase_module = shipyard } }
							set_starbase_module = { slot = 1 module = shipyard }
							set_starbase_module = { slot = 2 module = shipyard }
						}
					}
				} else = { create_starbase = { size = starbase_starport module = shipyard owner = root } }
			}
			while = { count = 10 create_pop = { species = root } }
			if = {
				limit = { count_owned_pop = { count < 5 limit = { is_exact_same_species = root } } }
				while = {
					limit = { count_owned_pop = { count < 5 limit = { is_exact_same_species = root } } }
					random_owned_pop = {
						limit = { NOT = { is_exact_same_species = root } }
						prev = { create_pop = { species = root } }
						kill_pop = yes
					}
				}
			}
			# Create armies
			if = { limit = { root = { has_civic = civic_machine_terminator } } while = { count = 9 create_army = { owner = root species = root type = machine_assault_1 } } } # More armies if exterminator
			else = { while = { count = 5 create_army = { owner = root species = root type = machine_assault_1 } } } # Regular armies
			# Flip remaining flagged planets
			while = {
				count = 100
				limit = { any_system = { has_star_flag = machup_system_flip exists = starbase starbase = { is_owned_by = event_target:current_uprising_originator } } }
				random_system = {
					limit = { has_star_flag = machup_system_flip exists = starbase starbase = { is_owned_by = event_target:current_uprising_originator } }
					starbase = { set_owner = root }
				}
			}
			event_target:current_uprising_originator = {
				every_owned_planet = {
					limit = { solar_system = { has_star_flag = machup_system_flip } }
					# Flip military stations
					solar_system = {
						every_fleet_in_system = {
							limit = { exists = owner is_owned_by = event_target:current_uprising_originator any_owned_ship = { is_ship_class = shipclass_military_station } }
							set_owner = root
						}
					}
					set_planet_flag = been_flipped
					set_owner = root
					set_controller = root
					while = { limit = { free_housing > 0 } create_pop = { species = root } }
					if = {
						limit = { count_owned_pop = { count < 5 limit = { is_exact_same_species = root } } }
						while = { limit = { count_owned_pop = { count < 5 limit = { is_exact_same_species = root } } }
							random_owned_pop = {
								limit = { NOT = { is_exact_same_species = root } }
								prev = { create_pop = { species = root } }
								kill_pop = yes
							}
						}
					}
					# Create armies on planets
					if = { limit = { root = { has_civic = civic_machine_terminator } } while = { count = 7 create_army = { owner = root species = root type = machine_assault_1 } } } # More armies if exterminator
					else = { while = { count = 4 create_army = { owner = root species = root type = machine_assault_1 } } } # Regular armies
				}
			}
		}
		# Get host's technologies
		copy_techs_from = {
			target = event_target:current_uprising_originator
			except = {
				# Robots
				tech_robotic_workers
				tech_droid_workers
				tech_synthetic_workers
				# Food
				tech_eco_simulation
				tech_gene_crops
				tech_nano_vitality_crops
				tech_nutrient_replication
				# Misc
				tech_frontier_health
				tech_frontier_hospital
				tech_telepathy
				tech_precognition_interface
				tech_psi_jump_drive_1
				tech_galactic_markets
				tech_subdermal_stimulation
				tech_global_research_initiative
				tech_neural_implants
				tech_psionic_theory
				# Non-Machine Robomodding
				tech_robomodding
				tech_robomodding_points_1
				tech_robomodding_points_2
				# Genetics
				tech_genome_mapping
				tech_vitality_boosters
				tech_epigenetic_triggers
				tech_cloning
				tech_gene_banks
				tech_gene_seed_purification
				tech_morphogenetic_field_mastery
				tech_gene_tailoring
				tech_glandular_acclimation
				tech_gene_expressions
				tech_selected_lineages
				tech_capacity_boosters
				# Horizon Signal
				tech_akx_worm_1
				tech_akx_worm_2
				tech_akx_worm_3
			}
		}
		# Survey host's surveyed planets
		every_system = {
			limit = { is_surveyed = { who = event_target:current_uprising_originator status = yes } }
		# event_target:current_uprising_originator = { every_planet_within_border = {
			set_surveyed = { surveyed = yes surveyor = root }
		}
		# Declare war on host
		declare_war = {
			target = event_target:current_uprising_originator
			name = { key = "NAME_Machine_Uprising_War" variable_string = "[This.MainDefender.GetAdj]" }
			attacker_war_goal = "wg_machine_uprising"
		}
		# Create fleets
		if = {
			limit = { has_civic = civic_machine_terminator }
			# Exterminator fleets, 150% naval cap
			create_fleet_from_naval_cap = 0.2
			random_owned_planet = { last_created_fleet = { set_location = prev } }
			create_fleet_from_naval_cap = 0.3
			random_owned_planet = { last_created_fleet = { set_location = prev } }
			create_fleet_from_naval_cap = 0.4
			random_owned_planet = { last_created_fleet = { set_location = prev } }
			create_fleet_from_naval_cap = 0.6
			random_owned_planet = { last_created_fleet = { set_location = prev } }
		}
		# Regular fleets, 80% naval cap
		else = {
			create_fleet_from_naval_cap = 0.1
			random_owned_planet = { last_created_fleet = { set_location = prev } }
			create_fleet_from_naval_cap = 0.3
			random_owned_planet = { last_created_fleet = { set_location = prev } }
			create_fleet_from_naval_cap = 0.4
			random_owned_planet = { last_created_fleet = { set_location = prev } }
		}
		# science
		create_fleet = {
			effect = {
				set_owner = root
				create_ship = { name = random random_existing_design = science }
				set_fleet_stance = evasive
				set_location = root.capital_scope
				owner = { create_leader = { class = scientist sub_type = survey name = random species = owner_main_species } }
				set_leader = last_created_leader
			}
		}
		# constructor
		create_fleet = {
			effect = {
				set_owner = root
				create_ship = { name = random random_existing_design = constructor }
				set_fleet_stance = evasive
				set_location = root.capital_scope
			}
		}
		every_controlled_fleet = { set_event_locked = no }
		every_playable_country = {
			limit = {
				has_communications = event_target:current_uprising_originator
				NOR = {
					is_same_value = root
					is_same_value = event_target:current_uprising_originator
				}
			}
			country_event = { id = syndaw.1025 days = 5 }
		}
		observer_event = { id = observer.81 }
		add_opinion_modifier = { who = event_target:MachineEmpireUprisingOrigin modifier = opinion_empire_origine }
		add_trust = { who = event_target:MachineEmpireUprisingOrigin amount = 100 }
	}
}

country_event = {
	id = UniqueAscensionPerksEvents.206
	title = "edict_machine_infiltration_menu"
	desc = {
		trigger = {
			text = "UniqueAscensionPerksEvents.206.Desc"
			text = newline
			text = "UniqueAscensionPerksEvents.206.Criteria.1"
			text = "UniqueAscensionPerksEvents.206.Criteria.2"
			text = "UniqueAscensionPerksEvents.206.Criteria.3"
			text = "UniqueAscensionPerksEvents.206.Criteria.4"
			text = "UniqueAscensionPerksEvents.206.Criteria.5"
			text = "UniqueAscensionPerksEvents.206.Criteria.6"
			text = newline
			text = "UniqueAscensionPerksEvents.206.Ask"
		}
	}
	show_sound = event_robo
	picture = GFX_evt_robot_assembly_plant
	is_triggered_only = yes
	immediate = {
		random_country = { limit = { is_valid_country_for_machine_infiltration = yes NOT = { is_same_empire = root } }
			save_event_target_as = country_1
			random_country = { limit = { is_valid_country_for_machine_infiltration = yes NOR = { is_same_empire = root is_same_empire = event_target:country_1 } }
				save_event_target_as = country_2
				random_country = { limit = { is_valid_country_for_machine_infiltration = yes NOR = { is_same_empire = root is_same_empire = event_target:country_1 is_same_empire = event_target:country_2 } }
					save_event_target_as = country_3
					random_country = { limit = { is_valid_country_for_machine_infiltration = yes NOR = { is_same_empire = root is_same_empire = event_target:country_1 is_same_empire = event_target:country_2 is_same_empire = event_target:country_3 } }
						save_event_target_as = country_4
						random_country = { limit = { is_valid_country_for_machine_infiltration = yes NOR = { is_same_empire = root is_same_empire = event_target:country_1 is_same_empire = event_target:country_2 is_same_empire = event_target:country_3 is_same_empire = event_target:country_4 } }
							save_event_target_as = country_5
							random_country = { limit = { is_valid_country_for_machine_infiltration = yes NOR = { is_same_empire = root is_same_empire = event_target:country_1 is_same_empire = event_target:country_2 is_same_empire = event_target:country_3 is_same_empire = event_target:country_4 is_same_empire = event_target:country_5 } } save_event_target_as = country_6 }
						}
					}
				}
			}
		}
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.1"
		trigger = { exists = event_target:country_1 }
		hidden_effect = { save_event_target_as = MachineEmpireInfiltrationOrigin event_target:country_1 = { country_event = { id = UniqueAscensionPerksEvents.207 days = 60 random = 300 } set_country_flag = incoming_machine_infiltration } }
		custom_tooltip = "UniqueAscensionPerksEvents.206.Country.1.tooltip"
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.2"
		trigger = { exists = event_target:country_2 }
		hidden_effect = { save_event_target_as = MachineEmpireInfiltrationOrigin event_target:country_2 = { country_event = { id = UniqueAscensionPerksEvents.207 days = 60 random = 300 } set_country_flag = incoming_machine_infiltration } }
		custom_tooltip = "UniqueAscensionPerksEvents.206.Country.1.tooltip"
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.3"
		trigger = { exists = event_target:country_3 }
		hidden_effect = { save_event_target_as = MachineEmpireInfiltrationOrigin event_target:country_3 = { country_event = { id = UniqueAscensionPerksEvents.207 days = 60 random = 300 } set_country_flag = incoming_machine_infiltration } }
		custom_tooltip = "UniqueAscensionPerksEvents.206.Country.1.tooltip"
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.4"
		trigger = { exists = event_target:country_4 }
		hidden_effect = { save_event_target_as = MachineEmpireInfiltrationOrigin event_target:country_4 = { country_event = { id = UniqueAscensionPerksEvents.207 days = 60 random = 300 } set_country_flag = incoming_machine_infiltration } }
		custom_tooltip = "UniqueAscensionPerksEvents.206.Country.1.tooltip"
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.5"
		trigger = { exists = event_target:country_5 }
		hidden_effect = { save_event_target_as = MachineEmpireInfiltrationOrigin event_target:country_5 = { country_event = { id = UniqueAscensionPerksEvents.207 days = 60 random = 300 } set_country_flag = incoming_machine_infiltration } }
		custom_tooltip = "UniqueAscensionPerksEvents.206.Country.1.tooltip"
	}
	option = {
		name = "UniqueAscensionPerksEvents.206.Country.6"
		trigger = { exists = event_target:country_6 }
		hidden_effect = { save_event_target_as = MachineEmpireInfiltrationOrigin event_target:country_6 = { country_event = { id = UniqueAscensionPerksEvents.207 days = 60 random = 300 } set_country_flag = incoming_machine_infiltration } }
		custom_tooltip = "UniqueAscensionPerksEvents.206.Country.1.tooltip"
	}
	option = { name = "UniqueAscensionPerks.select_country" hidden_effect = { country_event = { id = UniqueAscensionPerksEvents.206 } } }
	option = { name = "UniqueAscensionPerksEvents.72.Abort" add_resource = { energy = 10000 unity = 2500 influence = 75 } ai_chance = { factor = 0.1 } default_hide_option = yes }
}

country_event = {
	id = UniqueAscensionPerksEvents.207
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		remove_country_flag = incoming_machine_infiltration
		random_list = {
			20 = { modifier = { factor = 2.0 has_technology = tech_combat_computers_3 } modifier = { factor = 2.0 has_technology = tech_synthetic_workers } modifier = { factor = 1.5 has_technology = tech_droid_workers } modifier = { factor = 1.5 any_owned_pop = { pop_has_trait = trait_mechanical } } modifier = { factor = 1.1 has_technology = tech_robotic_workers } }
			10 = { modifier = { factor = 2.0 has_ascension_perk = ap_mind_over_matter } modifier = { factor = 3.0 has_country_flag = machine_infiltration_aware } set_country_flag = incoming_machine_infiltration_failure }
		}
		if = {
			limit = { has_country_flag = incoming_machine_infiltration_success }
			remove_country_flag = incoming_machine_infiltration_success
			set_country_flag = machine_infiltration_completed
			save_event_target_as = MachineEmpireInfiltrationTarget
			event_target:MachineEmpireInfiltrationOrigin = { country_event = { id = UniqueAscensionPerksEvents.208 } }
		} else_if = {
			limit = { has_country_flag = incoming_machine_infiltration_failure }
			remove_country_flag = incoming_machine_infiltration_failure
			save_event_target_as = MachineEmpireInfiltrationTarget
			set_timed_country_flag = { flag = machine_infiltration_aware years = 5 }
			event_target:MachineEmpireInfiltrationOrigin = { country_event = { id = UniqueAscensionPerksEvents.209 } }
		}
	}
}

country_event = {
	id = UniqueAscensionPerksEvents.208
	title = "UniqueAscensionPerksEvents.208.Name"
	desc = "UniqueAscensionPerksEvents.208.Desc"
	is_triggered_only = yes
	show_sound = event_robo
	picture = GFX_evt_mechanical_prophet
	option = { name = EXCELLENT }
}

country_event = {
	id = UniqueAscensionPerksEvents.209
	title = "UniqueAscensionPerksEvents.209.Name"
	desc = "UniqueAscensionPerksEvents.209.Desc"
	is_triggered_only = yes
	show_sound = event_ai_started
	picture = GFX_evt_mechanical_prophet
	option = {
		name = "UniqueAscensionPerksEvents.209.a"
		event_target:MachineEmpireInfiltrationTarget = { add_opinion_modifier = { who = root modifier = opinion_failed_machine_infiltration } }
		custom_tooltip = "UniqueAscensionPerksEvents.209.a.tooltip"
	}
}
