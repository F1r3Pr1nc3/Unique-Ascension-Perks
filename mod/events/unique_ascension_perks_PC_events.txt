namespace = UniqueAscensionPerksEvents

######################################
#									 #
######### Primitive Creation #########
#									 #
######################################

@SdjConstMenuListedSpecies = 12
@SdjConstMenuListOffset	=	4

country_event = {
	id = UniqueAscensionPerksEvents.140
	title = "ap_primitives_creation"
	desc = "ap_primitives_creation_desc"
	show_sound = event_pre_ftl_civilization
	picture = GFX_evt_medieval_alien_civilization
	location = capital_scope
	is_triggered_only = yes
	option = { name = EXCELLENT }
}

# Decision CREATE_PRIMITIVE_RETRO_COUNTRY
# fromfrom = Country
planet_event = {
	id = UniqueAscensionPerksEvents.141
	title = "UniqueAscensionPerksEvents.141.Name"
	desc = "UniqueAscensionPerksEvents.141.Desc"
	show_sound = event_pre_ftl_civilization
	picture = GFX_evt_alien_hieroglyphics # GFX_evt_medieval_alien_civilization # picture = GFX_evt_big_landing_ship
	location = root
	is_triggered_only = yes
	immediate = {
		save_event_target_as = new_primitive_world
		set_planet_flag = new_primitive_world
		if = { limit = { NOT = { exists = event_target:owning_empire } exists = fromfrom }
			fromfrom = { save_event_target_as = owning_empire }
		}
	}
	after = {
		if = { limit = { has_planet_flag = new_primitive_world }
			# if = { limit = { uninhabitable_regular_planet = yes }
			# 	if = {
			# 		limit = {
			# 			has_country_resource = { type = influence amount > 10 }
			# 			has_country_resource = { type = food amount > 800 }
			# 			has_country_resource = { type = minerals amount > 1800 }
			# 			has_country_resource = { type = energy amount > 3200 }
			# 		}
			# 		if		= { limit = { merg_is_molten = yes }		start_terraform_process = pc_arid } # pc_desert
			# 		else_if = { limit = { merg_is_toxic = yes }			start_terraform_process = pc_continental }
			# 		else_if = { limit = { merg_is_frozen = yes }		start_terraform_process = pc_arctic } # pc_alpine
			# 		else_if = { limit = { merg_is_barren = yes }		start_terraform_process = pc_desert }
			# 		else_if = { limit = { merg_is_barren_cold = yes }	start_terraform_process = pc_alpine } # pc_tundra
			# 		else = { start_terraform_process = pc_ocean }
			# 		reset_planet = yes
			# 		add_resource = { influence = -10 food = -800 minerals = -1800 energy = -3200 }
			# 	} else = { # full refund
			# 		add_resource = { influence = 10 food = 800 minerals = 1800 energy = 1800 }
			# 		break = yes
			# 	}
			# }
			planet_event = { id = UniqueAscensionPerksEvents.3141 }
		}
		else = { # refund
			from = {
				add_resource = { food = 700 minerals = 1600 energy = 1600 }
			}
		}
	}
	## VERY_EARLY_PRIMITIVE
	option = {
		name = "stone_age"
		custom_tooltip = "stone_age_desc"
		allow = { has_owner = no }
		hidden_effect = {
			set_timed_planet_flag = { flag = new_primitive_world_stone_age days = 5 }
		}
	}
	option = {
		name = "bronze_age"
		custom_tooltip = "bronze_age_desc"
		# allow = { has_owner = no }
		hidden_effect = {
			set_timed_planet_flag = { flag = new_primitive_world_bronze_age days = 5 }
		}
	}
	option = {
		name = "iron_age"
		custom_tooltip = "iron_age_desc"
		# allow = { has_owner = no }
		hidden_effect = {
			set_timed_planet_flag = { flag = new_primitive_world_iron_age days = 5 }
		}
	}
	## EARLY_PRIMITIVE
	option = {
		name = "late_medieval_age"
		custom_tooltip = "late_medieval_age_desc"
		# allow = { has_owner = yes }
		hidden_effect = {
			set_timed_planet_flag = { flag = new_primitive_world_medieval_age days = 5 }
		}
	}
	option = {
		name = "renaissance_age"
		custom_tooltip = "renaissance_age_desc"
		allow = { has_owner = yes }
		hidden_effect = {
			set_timed_planet_flag = { flag = new_primitive_world_renaissance_age days = 5 }
		}
	}
	option = {
		name = "steam_age"
		custom_tooltip = "steam_age_desc"
		allow = { has_owner = yes }
		hidden_effect = {
			set_timed_planet_flag = { flag = new_primitive_world_steam_age days = 5 }
		}
	}
	option = {
		name = "random_early_age"
		hidden_effect = {
			random_list = {
				4 = { modifier = { factor = 0.4 has_owner = yes }	set_timed_planet_flag = { flag = new_primitive_world_stone_age			days = 5 } }
				5 = { modifier = { factor = 0.5 has_owner = yes }	set_timed_planet_flag = { flag = new_primitive_world_bronze_age			days = 5 } }
				6 = { modifier = { factor = 0.6 has_owner = yes }	set_timed_planet_flag = { flag = new_primitive_world_iron_age			days = 5 } }
				9 = { modifier = { factor = 0.3 has_owner = no }	set_timed_planet_flag = { flag = new_primitive_world_medieval_age		days = 5 } }
				9 = { modifier = { factor = 0.2 has_owner = no }	set_timed_planet_flag = { flag = new_primitive_world_renaissance_age	days = 5 } }
				9 = { modifier = { factor = 0.1 has_owner = no }	set_timed_planet_flag = { flag = new_primitive_world_steam_age			days = 5 } }
			}
		}
		ai_chance = { factor = 0.1 } default_hide_option = yes
	}
	## LATE_PRIMITIVE
	option = {
		name = "industrial_age"
		custom_tooltip = "industrial_age_desc"
		trigger = { has_owner = yes is_colony = yes is_under_colonization = no }
		hidden_effect = {
			set_timed_planet_flag = { flag = new_primitive_world_industrial_age days = 5 }
		}
	}
	option = {
		name = "machine_age"
		custom_tooltip = "machine_age_desc"
		trigger = { has_owner = yes is_colony = yes is_under_colonization = no }
		hidden_effect = {
			set_timed_planet_flag = { flag = new_primitive_world_machine_age days = 5 }
		}
	}
	option = {
		name = "atomic_age"
		custom_tooltip = "atomic_age_desc"
		trigger = { has_owner = yes is_colony = yes is_under_colonization = no }
		hidden_effect = {
			set_timed_planet_flag = { flag = new_primitive_world_atomic_age days = 5 }
		}
	}
	option = {
		name = "early_space_age"
		custom_tooltip = "early_space_age_desc"
		trigger = { has_owner = yes is_colony = yes is_under_colonization = no }
		hidden_effect = {
			set_timed_planet_flag = { flag = new_primitive_world_early_space_age days = 5 }
		}
	}
	option = {
		name = "random_late_age"
		trigger = { has_owner = yes is_colony = yes is_under_colonization = no }
		hidden_effect = {
			random_list = {
				10 = { set_timed_planet_flag = { flag = new_primitive_world_industrial_age	days = 5 } }
				10 = { set_timed_planet_flag = { flag = new_primitive_world_machine_age		days = 5 } }
				10 = { set_timed_planet_flag = { flag = new_primitive_world_atomic_age		days = 5 } }
				10 = { set_timed_planet_flag = { flag = new_primitive_world_early_space_age	days = 5 } }
			}
		}
		ai_chance = { factor = 0.5 }
	}
	option = {
		name = "random_age"
		trigger = { has_owner = yes is_colony = yes }
		hidden_effect = {
			random_list = {
				1 = { set_timed_planet_flag = { flag = new_primitive_world_stone_age		days = 5 } }
				3 = { set_timed_planet_flag = { flag = new_primitive_world_bronze_age		days = 5 } }
				6 = { set_timed_planet_flag = { flag = new_primitive_world_iron_age			days = 5 } }
				9 = { set_timed_planet_flag = { flag = new_primitive_world_medieval_age		days = 5 } }
				9 = { set_timed_planet_flag = { flag = new_primitive_world_renaissance_age	days = 5 } }
				9 = { set_timed_planet_flag = { flag = new_primitive_world_steam_age		days = 5 } }
				10 = { set_timed_planet_flag = { flag = new_primitive_world_industrial_age	days = 5 } }
				10 = { set_timed_planet_flag = { flag = new_primitive_world_machine_age		days = 5 } }
				10 = { set_timed_planet_flag = { flag = new_primitive_world_atomic_age		days = 5 } }
				10 = { set_timed_planet_flag = { flag = new_primitive_world_early_space_age	days = 5 } }
			}
		}
		ai_chance = { factor = 0.2 }
	}
	option = {
		name = "abandon_project"
		hidden_effect = {
			remove_planet_flag = new_primitive_world
		}
		ai_chance = { factor = 0 }
	}
}

# LIST UP SPECIES
planet_event = {
	id = UniqueAscensionPerksEvents.3140 # (leng_project_event.3)
	location = event_target:new_primitive_world
	title = "UniqueAscensionPerksEvents.3140.name"
	desc = "UniqueAscensionPerksEvents.3140.desc"
	picture = GFX_evt_animal_wildlife
	is_triggered_only = yes
	immediate = {
		save_event_target_as = new_primitive_world
		set_planet_flag = new_primitive_world
		if = { limit = { NOT = { exists = event_target:owning_empire } exists = fromfrom }
			fromfrom = { save_event_target_as = owning_empire }
		}
		if = { limit = { NOT = { is_variable_set = SdjVarPageOfMenu } }
			set_variable = { which = SdjVarPageOfMenu value = 1 }
		}

		owner = {
			### Initialization of Variables and Flags
			if = { limit = { NOT = { has_country_flag = SdjFlagSpeciesMenuOpened } }
				root = { set_variable = { which = SdjVarPageOfMenu value = 1 } }
				set_country_flag = SdjFlagSpeciesMenuOpened
			}
			save_event_target_as = owning_empire
			if = { limit = { exists = owner_species }
				save_event_target_as = owner_species
				save_event_target_as = primitive_world_species # fallback
			}
			# Cleanup (only to be sure)
			every_owned_species = { remove_species_flag = CmtFlagSpeciesAlreadyListed@prev }

			### Target Owner Species, Set Offset of Species List
			if = {
				limit = {
					root = { check_variable = { which = SdjVarPageOfMenu value < 1.5 } }
					exists = owner_species
					any_owned_pop = { is_exact_same_species = prev.owner_species }
				}
				random_owned_pop = {
					limit = { is_exact_same_species = prev.owner_species }
					save_event_target_as = SdjTargetPop05		## @SdjConstMenuListOffset + 1
				}
				root = { set_variable = { which = SdjVarSpeciesListedNum value = @SdjConstMenuListOffset } }	## Only offset, but not count owner yet
			}
			else = {
				root = {
					### ListedNum := - CurrentPage * {(Species/Page) - 1 } + Offset
					set_variable = { which = SdjVarSpeciesListedNum value = SdjVarPageOfMenu }
					multiply_variable = { which = SdjVarSpeciesListedNum value = -1 }
					change_variable = { which = SdjVarSpeciesListedNum value = 1 }
					multiply_variable = { which = SdjVarSpeciesListedNum value = @SdjConstMenuListedSpecies }
					change_variable = { which = SdjVarSpeciesListedNum value = @SdjConstMenuListOffset }
				}
			}

			### Count Owner Species, Sort: owner_main -> owner -> robot -> others
			if = {
				limit = {
					exists = owner_species
					any_owned_pop = { is_exact_same_species = prev.owner_species }
				}
				root = {
					set_variable = { which = SdjVarSpeciesTotalNum value = 1 }
					change_variable = { which = SdjVarSpeciesListedNum value = 1 }
				}
				owner_species = {
					prev = {
						every_owned_species = {
							limit = { is_same_species = prevprev }
							set_species_flag = CmtFlagSpeciesAlreadyListed@prev
						}
					}
				}
			}
			else = { root = { set_variable = { which = SdjVarSpeciesTotalNum value = 0 } } }
		}

		if = { limit = { event_target:owning_empire = { is_gestalt = no } }
			# Main sub-species
			every_owned_species = {
				limit = {
					is_same_species = event_target:owner_species
					NOR = {
						is_exact_same_species = event_target:owner_species
						has_citizenship_type = { type = citizenship_organic_trophy country = event_target:owning_empire }
						has_species_flag = CmtFlagSpeciesAlreadyListed@event_target:owning_empire
					}
					OR = {
						is_valid_pop_for_PLANET_KILLER_NANOBOTS = yes
						AND = {
							event_target:owning_empire = {
								OR = {
									has_ascension_perk = ap_synthetic_evolution
									has_technology = tech_robotic_workers
								}
							}
							has_trait = trait_mechanical
						}
					}
				}
				CmtEffectListUpThisSpecies = yes
			}
			# Ordered in sub-species
			every_owned_species = {
				limit = {
					NOR = {
						has_citizenship_type = { type = citizenship_organic_trophy country = event_target:owning_empire }
						has_species_flag = CmtFlagSpeciesAlreadyListed@event_target:owning_empire
					}
					OR = {
						is_valid_pop_for_PLANET_KILLER_NANOBOTS = yes
						AND = {
							event_target:owning_empire = {
								OR = {
									has_ascension_perk = ap_synthetic_evolution
									has_technology = tech_robotic_workers
								}
							}
							has_trait = trait_mechanical
						}
					}
				}
				prev = {
					every_owned_species = {
						limit = {
							is_same_species = prevprev
							NOT = { has_species_flag = CmtFlagSpeciesAlreadyListed@event_target:owning_empire }
						}
						CmtEffectListUpThisSpecies = yes
					}
				}
			}
		}
		else = {
			# Main sub-species
			every_owned_species = {
				limit = {
					is_same_species = event_target:owner_species
					NOR = {
						is_exact_same_species = event_target:owner_species
						has_citizenship_type = { country = event_target:owning_empire type = citizenship_organic_trophy }
						has_species_flag = CmtFlagSpeciesAlreadyListed@event_target:owning_empire
					}
					OR = {
						AND = {
							is_valid_pop_for_PLANET_KILLER_NANOBOTS = no
							OR = {
								has_citizenship_type = { type = citizenship_full country = event_target:owning_empire }
								has_citizenship_type = { type = citizenship_full_machine country = event_target:owning_empire }
							}
						}
						AND = {
							event_target:owning_empire = { has_valid_civic = civic_machine_assimilator }
							OR = {
								has_trait = trait_cybernetic
								has_citizenship_type = { type = citizenship_assimilation country = event_target:owning_empire }
							}
						}
					}
				}
				CmtEffectListUpThisSpecies = yes
			}
			# Ordered in sub-species
			every_owned_species = {
				limit = {
					NOR = {
						is_same_species = event_target:owner_species
						has_trait = trait_mechanical # is_robotic = yes
						has_citizenship_type = { country = event_target:owning_empire type = citizenship_organic_trophy }
						has_species_flag = CmtFlagSpeciesAlreadyListed@event_target:owning_empire
					}
					OR = {
						AND = {
							is_valid_pop_for_PLANET_KILLER_NANOBOTS = no
							# OR = {
							# 	has_trait = trait_hive_mind
							# 	has_trait = trait_machine_unit
							# }
							OR = {
								has_citizenship_type = { type = citizenship_full country = event_target:owning_empire }
								has_citizenship_type = { type = citizenship_full_machine country = event_target:owning_empire }
							}
						}
						AND = {
							event_target:owning_empire = { has_valid_civic = civic_machine_assimilator }
							OR = {
								has_trait = trait_cybernetic
								has_citizenship_type = { type = citizenship_assimilation country = event_target:owning_empire }
							}
						}
					}
				}
				prev = {
					every_owned_species = {
						limit = {
							is_same_species = prevprev
							NOT = { has_species_flag = CmtFlagSpeciesAlreadyListed@event_target:owning_empire }
						}
						CmtEffectListUpThisSpecies = yes
					}
				}
			}
		}
		### Count Page of Menus
		set_variable = { which = SdjVarMaxPageOfMenu value = 0 }
		change_variable = { which = SdjVarSpeciesTotalNum value = @SdjConstMenuListOffset }
		while = {
			limit = { check_variable = { which = SdjVarSpeciesTotalNum value > 0.5 } }
			subtract_variable = { which = SdjVarSpeciesTotalNum value = @SdjConstMenuListedSpecies }
			change_variable = { which = SdjVarMaxPageOfMenu value = 1 }
		}
		while = {
			count = @SdjConstMenuListedSpecies
			change_variable = { which = SdjVarSpeciesTotalNum value = SdjVarMaxPageOfMenu }
		}
		subtract_variable = { which = SdjVarSpeciesTotalNum value = @SdjConstMenuListOffset }
	}
	after = {
		hidden_effect = {
			# Cleanup (before resettle)
			every_owned_species = { remove_species_flag = CmtFlagSpeciesAlreadyListed@prev }
			event_target:owning_empire = {
				if = {
					limit = {
						has_country_flag = SdjFlagSpeciesMenuOpened
						exists = event_target:SdjTargetPopA
					}
					event_target:SdjTargetPopA = {
						species = {
							save_event_target_as = primitive_world_species
							root = {
								switch = { # from create_pre_ftl_species
									trigger = has_planet_flag
									pre_ftl_ocean_paradise	= { modify_species = { species = prev add_trait = trait_aquatic } }
									pre_ftl_subterranean	= { modify_species = { species = prev add_trait = trait_cave_dweller } }
									pre_ftl_void_dwellers	= { modify_species = { species = prev add_trait = trait_void_dweller_1 } }
								}
								if = {
									limit = {
										has_global_flag = life_engineering_installed
										NOR = { has_global_flag = has_uap_mod prevprev = { has_ascension_perk = ap_primitives_creation } }
									}
									modify_species = {
										species = prev
										base = prev
										add_trait = trait_leng_engineered
										ideal_planet_class = root
									}
								}
								while = { count = 4 create_pop = { species = prev } }
								planet_event = { id = UniqueAscensionPerksEvents.141 }
							}
						}
					}
				}
			}
		}
	}
	option = {		## Random empire species
		name = leng_project_event.3x.name
		# custom_tooltip = leng_project_event.3x.tooltip
		default_hide_option = yes
		trigger = { check_variable = { which = SdjVarPageOfMenu value < 1.5 } }
		allow = {
			event_target:owning_empire = {
				any_owned_species = { can_think = yes is_robotic = no }
			}
		}
		hidden_effect = {
			event_target:owning_empire = {
				if = {
					limit = {
						any_owned_species = {
							can_think = yes
							NOR = {
								is_robotic = yes
								has_trait = trait_hive_mind
								root = { habitability = { who = prev value < 0.5 } }
							}
						}
					}
					random_owned_species = {
						limit = {
							can_think = yes
							NOR = {
								is_robotic = yes
								has_trait = trait_hive_mind
								root = { habitability = { who = prev value < 0.5 } }
							}
						}
						weights = {
							base = 1
							modifier = { add = 4 species_can_be_necrophaged = yes }
							modifier = { add = 2 ideal_planet_class = root }
							modifier = { add = 2 root = { habitability = { who = prev value > 0.7 } } }
							# modifier = { add = 6 exists = home_planet home_planet = { is_planet = root } }
						}
						save_event_target_as = primitive_world_species
					}
				}
				else_if = {
					limit = {
						any_owned_species = {
							can_think = yes
							NOR = {
								is_robotic = yes
								has_trait = trait_hive_mind
								root = { habitability = { who = prev value < 0.35 } }
							}
						}
					}
					random_owned_species = {
						limit = {
							can_think = yes
							NOR = {
								is_robotic = yes
								has_trait = trait_hive_mind
								root = { habitability = { who = prev value < 0.35 } }
							}
						}
						weights = {
							base = 1
							modifier = { add = 4 species_can_be_necrophaged = yes }
							modifier = { add = 2 ideal_planet_class = root }
							modifier = { add = 2 root = { habitability = { who = prev value > 0.55 } } }
							# modifier = { add = 6 exists = home_planet home_planet = { is_planet = root } }
						}
						save_event_target_as = primitive_world_species
					}
				}
				else = { # last fallback
					random_owned_species = {
						limit = {
							NOR = {
								is_robotic = yes
								has_trait = trait_hive_mind
							}
						}
						weights = {
							base = 1
							modifier = { add = 2 ideal_planet_class = root }
							modifier = { add = 2 root = { habitability = { who = prev value > 0.55 } } }
							modifier = { add = 6 exists = home_planet home_planet = { is_planet = root } }
						}
						save_event_target_as = primitive_world_species
					}
				}
				event_target:primitive_world_species = {
					random_species_pop = {
						save_event_target_as = SdjTargetPopA
						log="Random empire species choosen: [This.GetName]"
					}
				}
			}
		}
	}
	option = {		## Random planet owner species
		name = leng_project_event.3y.name
		# custom_tooltip = leng_project_event.3y.tooltip
		trigger = { check_variable = { which = SdjVarPageOfMenu value < 1.5 } }
		allow = {
			any_owned_species = {
				can_think = yes
				NOR = {
					is_robotic = yes
					has_trait = trait_hive_mind
				}
			}
		}
		hidden_effect = {
			random_owned_species = {
				limit = {
					can_think = yes
					NOR = {
						is_robotic = yes
						has_trait = trait_hive_mind
					}
				}
				weights = {
					base = 1
					modifier = { add = 3 species_can_be_necrophaged = yes }
					modifier = { add = 1 ideal_planet_class = root }
					modifier = { add = 1 is_archetype = PRESAPIENT }
					modifier = { add = 1 root = { habitability = { who = prev value > 0.5 } } }
					modifier = { add = 6 exists = home_planet home_planet = { is_planet = root } }
				}
				random_species_pop = {
					limit = { exists = planet planet = { is_planet = root } }
					save_event_target_as = SdjTargetPopA
					log="Random planet species choosen: [This.GetName]"
				}
			}
		}
	}
	# option = {		## Default owner species
	# 	name = leng_project_event.3z.name
	# 	custom_tooltip = leng_project_event.3z.tooltip
	# 	trigger = { check_variable = { which = SdjVarPageOfMenu value < 1.5 } }
	# 	hidden_effect = {
	# 	}
	# }
	option = {
		name = leng_project_event.3a.name
		# custom_tooltip = leng_project_event.3a.tooltip
		trigger = {
			exists = event_target:SdjTargetPop01
			check_variable = { which = SdjVarSpeciesListedNum value > 0.5 }
			check_variable = { which = SdjVarPageOfMenu value > 1.5 }
		}
		hidden_effect = { event_target:SdjTargetPop01 = { save_event_target_as = SdjTargetPopA } }
	}
	option = {
		name = leng_project_event.3b.name
		# custom_tooltip = leng_project_event.3b.tooltip
		trigger = {
			exists = event_target:SdjTargetPop02
			check_variable = { which = SdjVarSpeciesListedNum value > 1.5 }
			check_variable = { which = SdjVarPageOfMenu value > 1.5 }
		}
		hidden_effect = { event_target:SdjTargetPop02 = { save_event_target_as = SdjTargetPopA } }
	}
	option = {
		name = leng_project_event.3c.name
		# custom_tooltip = leng_project_event.3c.tooltip
		trigger = {
			exists = event_target:SdjTargetPop03
			check_variable = { which = SdjVarSpeciesListedNum value > 2.5 }
			check_variable = { which = SdjVarPageOfMenu value > 1.5 }
		}
		hidden_effect = { event_target:SdjTargetPop03 = { save_event_target_as = SdjTargetPopA } }
	}
	option = {
		name = leng_project_event.3d.name
		# custom_tooltip = leng_project_event.3d.tooltip
		trigger = {
			exists = event_target:SdjTargetPop04
			check_variable = { which = SdjVarSpeciesListedNum value > 3.5 }
			check_variable = { which = SdjVarPageOfMenu value > 1.5 }
		}
		hidden_effect = { event_target:SdjTargetPop04 = { save_event_target_as = SdjTargetPopA } }
	}
	# option = {
	# 	name = SdjTextSeparator.name
	# 	custom_tooltip = SdjTextSeparator.tooltip
	# 	trigger = { check_variable = { which = SdjVarSpeciesListedNum value > 4.5 } }
	# 	allow = { hidden_trigger = { always = no } }
	# }
	option = {
		name = leng_project_event.3e.name
		# custom_tooltip = leng_project_event.3e.tooltip
		trigger = {
			exists = event_target:SdjTargetPop05
			check_variable = { which = SdjVarSpeciesListedNum value > 4.5 }
		}
		hidden_effect = { event_target:SdjTargetPop05 = { save_event_target_as = SdjTargetPopA } }
	}
	option = {
		name = leng_project_event.3f.name
		# custom_tooltip = leng_project_event.3f.tooltip
		trigger = {
			exists = event_target:SdjTargetPop06
			check_variable = { which = SdjVarSpeciesListedNum value > 5.5 }
		}
		hidden_effect = { event_target:SdjTargetPop06 = { save_event_target_as = SdjTargetPopA } }
	}
	option = {
		name = leng_project_event.3g.name
		# custom_tooltip = leng_project_event.3g.tooltip
		trigger = {
			exists = event_target:SdjTargetPop07
			check_variable = { which = SdjVarSpeciesListedNum value > 6.5 }
		}
		hidden_effect = { event_target:SdjTargetPop07 = { save_event_target_as = SdjTargetPopA } }
	}
	option = {
		name = leng_project_event.3h.name
		# custom_tooltip = leng_project_event.3h.tooltip
		trigger = {
			exists = event_target:SdjTargetPop08
			check_variable = { which = SdjVarSpeciesListedNum value > 7.5 }
		}
		hidden_effect = { event_target:SdjTargetPop08 = { save_event_target_as = SdjTargetPopA } }
	}
	# option = {
	# 	name = SdjTextSeparator.name
	# 	custom_tooltip = SdjTextSeparator.tooltip
	# 	trigger = { check_variable = { which = SdjVarSpeciesListedNum value > 8.5 } }
	# 	allow = { hidden_trigger = { always = no } }
	# }
	option = {
		name = leng_project_event.3i.name
		# custom_tooltip = leng_project_event.3i.tooltip
		trigger = {
			exists = event_target:SdjTargetPop09
			check_variable = { which = SdjVarSpeciesListedNum value > 8.5 }
		}
		hidden_effect = { event_target:SdjTargetPop09 = { save_event_target_as = SdjTargetPopA } }
	}
	option = {
		name = leng_project_event.3j.name
		# custom_tooltip = leng_project_event.3j.tooltip
		trigger = {
			exists = event_target:SdjTargetPop10
			check_variable = { which = SdjVarSpeciesListedNum value > 9.5 }
		}
		hidden_effect = { event_target:SdjTargetPop10 = { save_event_target_as = SdjTargetPopA } }
	}
	option = {
		name = leng_project_event.3k.name
		# custom_tooltip = leng_project_event.3k.tooltip
		trigger = {
			exists = event_target:SdjTargetPop11
			check_variable = { which = SdjVarSpeciesListedNum value > 10.5 }
		}
		hidden_effect = { event_target:SdjTargetPop11 = { save_event_target_as = SdjTargetPopA } }
	}
	option = {
		name = leng_project_event.3l.name
		# custom_tooltip = leng_project_event.3l.tooltip
		trigger = {
			exists = event_target:SdjTargetPop12
			check_variable = { which = SdjVarSpeciesListedNum value > 11.5 }
		}
		hidden_effect = { event_target:SdjTargetPop12 = { save_event_target_as = SdjTargetPopA } }
	}
	# option = {
	# 	name = SdjTextSeparator.name
	# 	custom_tooltip = SdjTextSeparator.tooltip
	# 	allow = { hidden_trigger = { always = no } }
	# }
	option = {
		name = UniqueAscensionPerksMenuEvents.2.next
		# custom_tooltip = " "
		trigger = { check_variable = { which = SdjVarSpeciesListedNum value > 12.5 } }
		hidden_effect = {
			change_variable = { which = SdjVarPageOfMenu value = 1 }
			planet_event = { id = UniqueAscensionPerksEvents.3140 }
		}
	}
	option = {
		name = UniqueAscensionPerksMenuEvents.2.prev
		# custom_tooltip = " "
		trigger = { check_variable = { which = SdjVarPageOfMenu value > 1.5 } }
		hidden_effect = {
			change_variable = { which = SdjVarPageOfMenu value = -1 }
			planet_event = { id = UniqueAscensionPerksEvents.3140 }
		}
	}
	option = {
		name = SdjTextExit.name
		# custom_tooltip = " "
		event_target:owning_empire = { add_resource = { energy = 1400 } }
		hidden_effect = {
			event_target:owning_empire = { remove_country_flag = SdjFlagSpeciesMenuOpened }
			every_owned_species = { remove_species_flag = CmtFlagSpeciesAlreadyListed@root }
			clear_variable = SdjVarSpeciesListedNum
			clear_variable = SdjVarSpeciesTotalNum
			clear_variable = SdjVarMaxPageOfMenu
		}
	}
}

# CREATE_PRIMITIVE_COUNTRY
planet_event = {
	id = UniqueAscensionPerksEvents.3141
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = { limit = { NOT = { exists = event_target:owning_empire } }
			if = { limit = { exists = fromfromfrom fromfromfrom = { is_scope_type = country } }
				fromfromfrom = { save_event_target_as = owning_empire }
			}
			else_if = { limit = { exists = space_owner }
				space_owner = { save_event_target_as = owning_empire }
			}
		}
		set_planet_flag = primitive_creation_done
		### Resettle pops:
		export_trigger_value_to_variable = { variable = num_pops trigger = num_pops }
		if = { limit = { has_owner = yes check_variable = { which = num_pops value > 0 } }
			switch = { trigger = has_planet_flag
				new_primitive_world_stone_age		= { set_variable = { which = primitive_pops value = @stone_age_pops } }			# = 4
				new_primitive_world_bronze_age		= { set_variable = { which = primitive_pops value = @bronze_age_pops } }		# = 8
				new_primitive_world_iron_age		= { set_variable = { which = primitive_pops value = @iron_age_pops } }			# = 9
				new_primitive_world_medieval_age	= { set_variable = { which = primitive_pops value = @late_medieval_age_pops } }	# = 10
				new_primitive_world_renaissance_age	= { set_variable = { which = primitive_pops value = @renaissance_age_pops } }	# = 12
				new_primitive_world_steam_age		= { set_variable = { which = primitive_pops value = @steam_age_pops } }			# = 16
				new_primitive_world_industrial_age	= { set_variable = { which = primitive_pops value = @industrial_age_pops } }	# = 22
				new_primitive_world_machine_age		= { set_variable = { which = primitive_pops value = @machine_age_pops } }		# = 24
				new_primitive_world_atomic_age		= { set_variable = { which = primitive_pops value = @atomic_age_pops } }		# = 26
				new_primitive_world_early_space_age	= { set_variable = { which = primitive_pops value = @early_space_age_pops } }	# = 28
			}
			if = { limit = { is_variable_set = primitive_pops }
				set_variable = { which = pops_to_resettle value = num_pops }
				subtract_variable = { which = pops_to_resettle value = primitive_pops }
				multiply_variable = { which = pops_to_resettle value = 1.25 } # 25% increased chance to get primitive_pops
				export_trigger_value_to_variable = {
					trigger = count_owned_pop
					parameters = {
						limit = {
							OR = {
								is_exact_same_species = event_target:primitive_world_species
								is_pop_category = bio_trophy
								is_pop_category = purge
								is_pop_category = assimilation
								is_pop_category = pre_sapients
							}
							NOR = {
								is_robot_pop = yes
								has_trait = trait_hive_mind
							}
						}
					}
					variable = primitive_pops
				}
				subtract_variable = { which = pops_to_resettle value = primitive_pops }
				round_variable = pops_to_resettle
				clear_variable = primitive_pops
			}
		}
		else = { set_variable = { which = pops_to_resettle value = 0 } }

		if = { limit = { exists = event_target:primitive_world_species }
			if = { limit = { is_ideal_planet_class = { who = event_target:primitive_world_species status = no } }
				event_target:primitive_world_species = {
					create_species = {
						name = random
						# plural = random
						class = this
						portrait = this
						# homeworld = root
						traits = {
							ideal_planet_class = root
							trait = random_traits
						}
						is_mod = yes
						allow_negative_traits = no
						namelist = this
						effect = { save_event_target_as = primitive_world_species }
					}
				}
			}
		}
		else = { last_created_species = { save_event_target_as = primitive_world_species } }

		### Resettle pops
		if = {
			limit = {
				check_variable = { which = num_pops value > 1 }
				check_variable = { which = pops_to_resettle value > 0 }
				event_target:owning_empire = {
					any_owned_planet = {
						NOR = {
							is_planet = root
							has_orbital_bombardment = yes
							is_occupied_flag = yes
							is_under_colonization = yes
							free_housing < -1
						}
						# OR = { free_jobs > -1 free_housing > -1 }
					}
				}
			}
			set_update_modifiers_batch = begin
			set_timed_planet_flag = { flag = primitives_resettled days = 3 }
			while = {
				count = pops_to_resettle
				limit = {
					# num_pops > 1
					check_variable = { which = pops_to_resettle value > 0 }
					any_owned_pop = {
						OR = {
							NOR = {
								is_exact_same_species = event_target:primitive_world_species
								is_pop_category = bio_trophy
								is_pop_category = purge
								is_pop_category = assimilation
								is_pop_category = pre_sapients
							}
							is_robot_pop = yes
							has_trait = trait_hive_mind
						}
					}
				}
				event_target:owning_empire = {
					# ordered_owned_planet = { TODO?
					# position = 0
					# order_by = distance_to_preftl
					random_owned_planet = {
						limit = {
							NOR = {
								has_planet_flag = primitives_resettled # is_planet = root
								has_orbital_bombardment = yes
								is_occupied_flag = yes
								is_under_colonization = yes
								free_housing < -1
							}
							# OR = { free_jobs > -1 free_housing > -1 }
						}
						# weights = { base = 1 modifier = { add = 2 OR = { free_jobs > 0 free_housing > 0 } } } too much performance?
						export_trigger_value_to_variable = { variable = expel_pop_var trigger = free_housing }
						change_variable = { which = expel_pop_var value = 2 }
						set_timed_planet_flag = { flag = primitives_resettled days = 3 }
						root = {
							while = {
								count = prev.expel_pop_var
								limit = {
									check_variable = { which = pops_to_resettle value > 0 }
									any_owned_pop = {
										OR = {
											NOR = {
												is_exact_same_species = event_target:primitive_world_species
												is_pop_category = bio_trophy
												is_pop_category = purge
												is_pop_category = assimilation
												is_pop_category = pre_sapients
											}
											is_robot_pop = yes
											has_trait = trait_hive_mind
										}
									}
								}
								random_owned_pop = {
									limit = {
										prevprev = { habitability = { who = prev value >= 0.5 } }
										OR = {
											NOR = {
												is_exact_same_species = event_target:primitive_world_species
												is_pop_category = bio_trophy
												is_pop_category = purge
												is_pop_category = assimilation
												is_pop_category = pre_sapients
											}
											is_robot_pop = yes
											has_trait = trait_hive_mind
										}
									}
									# weights = { base = 1 modifier = { add = 3 OR = { is_robot_pop = yes has_trait = trait_hive_mind } } } too much performance?
									unemploy_pop = yes
									clear_pop_category = yes
									resettle_pop = { pop = this planet = prevprev }
									root = { subtract_variable = { which = pops_to_resettle value = 1 } }
								}
							}
						}
						clear_variable = expel_pop_var
					}
				}
			}
			set_update_modifiers_batch = end
		}

		# create_early_pre_ftl_empire = yes
		create_country = {
			name = random
			type = primitive
			ethos = random # event_target:owning_empire
			authority = random
			# government_restrictions = {
			# 	authority = {
			# 		NOR = { value = auth_machine_intelligence value = auth_hive_mind }
			# 	}
			# }
			civics = {
				# civic = civic_landed_nobility
				# civic = civic_flat_world_theory
				civic = civic_secret_of_fire
				civic = civic_the_wheel
			}
			species = event_target:primitive_world_species
			ignore_initial_colony_error = yes
			flag = {
				icon = { category = "special" file = "primitive.dds" }
				background = { category = "backgrounds" file = "new_dawn.dds" }
				colors = { "turquoise" "green" "null" "null" }
			}
			ship_prefix = ""
			origin = "origin_enlightened" # Should only be visible if they become spacefaring
			day_zero_contact = no
			exclude_day_zero_contact = event_target:owning_empire
			released_by_country = event_target:owning_empire
			released_from_country = event_target:owning_empire
			effect = {
				set_graphical_culture = preindustrial_01
				prev = {
					set_owner = prev
					set_capital = yes
				}
				# Compare add_pre_ftl_buildings = yes
				random_list = {
					30 = {
						modifier = { factor = 3 NOT = { event_target:owning_empire = { has_ascension_perk = ap_primitives_creation } } }
						modifier = { factor = 0 NOT = { root = { has_planet_flag = new_primitive_world_stone_age } } }
						modifier = { factor = 0.1 root = { check_variable = { which = num_pops value > 28 } } }
						set_pre_ftl_age_effect = { PRE_FTL_AGE = stone_age }
						root = {
							while = {
								count = @stone_age_pops
								limit = {
									count_owned_pop = {
										count < @stone_age_pops
										limit = { is_exact_same_species = event_target:primitive_world_species }
									}
								}
								create_pop = { species = event_target:primitive_world_species }
							}
						}
					}
					30 = {
						modifier = { factor = 0 NOT = { root = { has_planet_flag = new_primitive_world_bronze_age } } }
						modifier = {
							factor = 0.1
							root = {
								OR = {
									check_variable = { which = num_pops value > 34 }
									check_variable = { which = num_pops value < @stone_age_pops }
								}
							}
						}
						set_pre_ftl_age_effect = { PRE_FTL_AGE = bronze_age }
						increase_pre_ftl_pops_by_age_effect = { PRE_FTL_AGE = bronze_age }
					}
					20 = {
						modifier = { factor = 0 NOT = { root = { has_planet_flag = new_primitive_world_iron_age } } }
						modifier = {
							factor = 0.1
							root = {
								OR = {
									check_variable = { which = num_pops value > 40 }
									check_variable = { which = num_pops value < @bronze_age_pops }
								}
							}
						}
						set_pre_ftl_age_effect = { PRE_FTL_AGE = iron_age }
						increase_pre_ftl_pops_by_age_effect = { PRE_FTL_AGE = iron_age }
					}
					16 = { modifier = { factor = 0 NOT = { root = { has_planet_flag = new_primitive_world_medieval_age } }		} set_pre_ftl_age_effect = { PRE_FTL_AGE = late_medieval_age }	increase_pre_ftl_pops_by_age_effect = { PRE_FTL_AGE = iron_age } }
					12 = { modifier = { factor = 0 NOT = { root = { has_planet_flag = new_primitive_world_renaissance_age } }	} set_pre_ftl_age_effect = { PRE_FTL_AGE = renaissance_age }	increase_pre_ftl_pops_by_age_effect = { PRE_FTL_AGE = iron_age } }
					10 = { modifier = { factor = 0 NOT = { root = { has_planet_flag = new_primitive_world_steam_age } }			} set_pre_ftl_age_effect = { PRE_FTL_AGE = steam_age }			increase_pre_ftl_pops_by_age_effect = { PRE_FTL_AGE = iron_age } }
					10 = { modifier = { factor = 0 NAND = { event_target:owning_empire = { has_ascension_perk = ap_primitives_creation } root = { has_planet_flag = new_primitive_world_industrial_age } }	} set_pre_ftl_age_effect = { PRE_FTL_AGE = industrial_age }		increase_pre_ftl_pops_by_age_effect = { PRE_FTL_AGE = iron_age } }
					10 = { modifier = { factor = 0 NAND = { event_target:owning_empire = { has_ascension_perk = ap_primitives_creation } root = { has_planet_flag = new_primitive_world_machine_age } }		} set_pre_ftl_age_effect = { PRE_FTL_AGE = machine_age }		increase_pre_ftl_pops_by_age_effect = { PRE_FTL_AGE = iron_age } }
					10 = { modifier = { factor = 0 NAND = { event_target:owning_empire = { has_ascension_perk = ap_primitives_creation } root = { has_planet_flag = new_primitive_world_atomic_age } }		} set_pre_ftl_age_effect = { PRE_FTL_AGE = atomic_age }			increase_pre_ftl_pops_by_age_effect = { PRE_FTL_AGE = iron_age } }
					10 = { modifier = { factor = 0 NAND = { event_target:owning_empire = { has_ascension_perk = ap_primitives_creation } root = { has_planet_flag = new_primitive_world_early_space_age } }	} set_pre_ftl_age_effect = { PRE_FTL_AGE = early_space_age }	increase_pre_ftl_pops_by_age_effect = { PRE_FTL_AGE = iron_age } }
				}
			}
		}
	}
	after = {
		if = { limit = { is_colony = no }
			setup_pre_ftl_planet = yes
		} else_if = { limit = { check_variable = { which = pops_to_resettle value > 0 } }
			while = { count = pops_to_resettle
				random_owned_pop = {
					# limit = {
					# 	NOR = {
					#		is_robot_pop = yes
					# 		has_trait = trait_hive_mind
					# 		can_think = no
					# 		is_pop_category = ruler
					# 	}
					# }
					# weights = {
					# 	base = 1
					# 	modifier = { add = 100 is_pop_category = purge }
					# 	modifier = { factor = 5 is_unemployed = yes }
					# 	modifier = { factor = 10 has_citizenship_rights = no }
					# 	modifier = { add = 10 OR = { is_pop_category = worker is_pop_category = slave } }
					# }
					if = { limit = { is_valid_refugee_pop = yes }
						save_event_target_as = refugee_pop
						refugee_pop_effect = yes
					}
					else = { random = { chance = 50 kill_pop = yes } }
				}
			}
		}
		set_pre_ftl_origin = yes
		pre_ftl_clean_up_effect = yes
		last_created_country = {
			if = { limit = { has_origin = "origin_default" }
				set_origin = "origin_enlightened" # Should only be visible if they become spacefaring
			}
			prev = {
				# set_owner = prev
				# set_capital = yes
				start_colony = {
					owner = prev
					species = event_target:primitive_world_species
					ethos = owner
				}
			}
		}
		if = {
			limit = {
				exists = solar_system.starbase
				exists = event_target:owning_empire
				solar_system.starbase = { is_owned_by = event_target:owning_empire }
			}
			solar_system = {
				system_event = { id = UniqueAscensionPerksEvents.3161 days = 9 }
			}
		}
		event_target:owning_empire = { set_visited = prev.solar_system }
		clear_variable = num_pops
		clear_variable = pops_to_resettle
		planet_event = { id = UniqueAscensionPerksEvents.3163 days = 25 }
	}
}

# Compare pre_ftl_tech_progress_situation (on_bi_yearly_pulse_country)
country_event = {
	id = UniqueAscensionPerksEvents.3142
	hide_window = yes
	is_triggered_only = yes
	# mean_time_to_happen = { months = 24 }
	# pre_triggers = { has_owner = yes }
	trigger = {
		is_country_type = primitive
		any_owned_planet = {
			has_planet_flag = primitive_creation_done
			NOT = { has_planet_flag = primitive_creation_planet_cooldown }
			has_observation_outpost = yes
			observation_outpost_owner = { has_ascension_perk = ap_primitives_creation }
		}
	}

	immediate = {
		random_owned_planet = {
			limit = {
				has_planet_flag = primitive_creation_done
				NOT = { has_planet_flag = primitive_creation_planet_cooldown }
				has_observation_outpost = yes
				observation_outpost_owner = { has_ascension_perk = ap_primitives_creation }
			}
			save_event_target_as = primitive_creation_planet
			owner = { save_event_target_as = primitive_creation_country }
			set_timed_planet_flag = { flag = primitive_creation_planet_cooldown months = 60 }
			observation_outpost_owner = {
				random_list = {
					5	= { modifier = { factor = 0 is_primitive_stage_one = no		} country_event = { id = UniqueAscensionPerksEvents.3143 } }
					15	= { modifier = { factor = 0 is_primitive_stage_one = no		} country_event = { id = UniqueAscensionPerksEvents.3144 } }
					20	= { modifier = { factor = 0 is_primitive_stage_one = no		} country_event = { id = UniqueAscensionPerksEvents.3145 } }
					10	= { modifier = { factor = 0 is_primitive_stage_two = no		} country_event = { id = UniqueAscensionPerksEvents.3146 } }
					10	= { modifier = { factor = 0 is_primitive_stage_two = no		} country_event = { id = UniqueAscensionPerksEvents.3147 } }
					10	= { modifier = { factor = 0 is_primitive_stage_two = no		} country_event = { id = UniqueAscensionPerksEvents.3148 } }
					3	= { modifier = { factor = 0 is_primitive_stage_three = yes	} country_event = { id = UniqueAscensionPerksEvents.3149 } }
					5	= { modifier = { factor = 0 is_primitive_stage_three = no	} country_event = { id = UniqueAscensionPerksEvents.3150 } }
				}
			}
		}
	}
}

country_event = {
	id = UniqueAscensionPerksEvents.3143
	title = "UniqueAscensionPerksEvents.3143.Name"
	desc = "UniqueAscensionPerksEvents.3143.Desc"
	show_sound = event_pre_ftl_civilization
	picture = GFX_evt_medieval_alien_civilization
	location = event_target:primitive_creation_planet
	is_triggered_only = yes
	option = { name = "UniqueAscensionPerksEvents.3143.a" ai_chance = { factor = 0.1 } add_resource = { alloys = 350 } }
	option = { name = "UniqueAscensionPerksEvents.3143.b" random = { chance = 20 primitive_country_into_next_age = yes } }
}

country_event = {
	id = UniqueAscensionPerksEvents.3144
	title = "UniqueAscensionPerksEvents.3144.Name"
	desc = "UniqueAscensionPerksEvents.3144.Desc"
	show_sound = event_pre_ftl_civilization
	picture = GFX_evt_medieval_alien_civilization
	location = event_target:primitive_creation_planet
	is_triggered_only = yes
	option = { name = "UniqueAscensionPerksEvents.3144.a" ai_chance = { factor = 0.1 } add_resource = { food = 500 } }
	option = { name = "UniqueAscensionPerksEvents.3143.b" random = { chance = 40 primitive_country_into_next_age = yes } }
}

country_event = {
	id = UniqueAscensionPerksEvents.3145
	title = "UniqueAscensionPerksEvents.3145.Name"
	desc = "UniqueAscensionPerksEvents.3145.Desc"
	show_sound = event_pre_ftl_civilization
	picture = GFX_evt_medieval_alien_civilization
	location = event_target:primitive_creation_planet
	is_triggered_only = yes
	option = { name = INTERESTING ai_chance = { factor = 0.1 } add_monthly_resource_mult = { resource = society_research value = 5 min = 250 max = 1000 } }
}

country_event = {
	id = UniqueAscensionPerksEvents.3146
	title = "UniqueAscensionPerksEvents.3146.Name"
	desc = "UniqueAscensionPerksEvents.3146.Desc"
	show_sound = event_cityscape
	picture = GFX_evt_metropolis
	location = event_target:primitive_creation_planet
	is_triggered_only = yes
	option = { name = INTERESTING ai_chance = { factor = 0.1 } add_monthly_resource_mult = { resource = unity value = 5 min = 500 max = 1500 } }
}

country_event = {
	id = UniqueAscensionPerksEvents.3147
	title = "UniqueAscensionPerksEvents.3147.Name"
	desc = "UniqueAscensionPerksEvents.3147.Desc"
	show_sound = event_cityscape
	picture = GFX_evt_mining_operations
	location = event_target:primitive_creation_planet
	is_triggered_only = yes
	option = { name = "UniqueAscensionPerksEvents.3147.a" ai_chance = { factor = 0.1 } add_resource = { minerals = 1000 } }
	option = { name = "UniqueAscensionPerksEvents.3143.b" random_list = { 95 = {} 5 = { modifier = { factor = 0 is_primitive_stage_three = yes } primitive_country_into_next_age = yes } } }
}

country_event = {
	id = UniqueAscensionPerksEvents.3148
	title = "UniqueAscensionPerksEvents.3148.Name"
	desc = "UniqueAscensionPerksEvents.3148.Desc"
	show_sound = event_cityscape
	picture = GFX_evt_drilling_for_gas
	location = event_target:primitive_creation_planet
	is_triggered_only = yes
	option = { name = "UniqueAscensionPerksEvents.3148.a" ai_chance = { factor = 0.1 } add_resource = { energy = 1000 } }
	option = { name = "UniqueAscensionPerksEvents.3143.b" random_list = { 95 = {} 5 = { modifier = { factor = 0 is_primitive_stage_three = yes } primitive_country_into_next_age = yes } } }
}

country_event = {
	id = UniqueAscensionPerksEvents.3149
	title = "UniqueAscensionPerksEvents.3149.Name"
	desc = "UniqueAscensionPerksEvents.3149.Desc"
	show_sound = event_pre_ftl_civilization
	picture = GFX_evt_medieval_alien_civilization
	location = event_target:primitive_creation_planet
	is_triggered_only = yes
	option = { name = AMAZING ai_chance = { factor = 0.1 } add_resource = { influence = 30 } primitive_country_into_next_age = yes }
}

country_event = {
	id = UniqueAscensionPerksEvents.3150
	title = "UniqueAscensionPerksEvents.3150.Name"
	desc = "UniqueAscensionPerksEvents.3150.Desc"
	show_sound = event_radio_chatter
	picture = GFX_evt_star_chart
	location = event_target:primitive_creation_planet
	is_triggered_only = yes
	option = {
		name = "SEISMIC_DISTURBANCE_1_PROJECT"
		hidden_effect = {
			random_list = {
				999 = { modifier = { factor = 0 is_primitive_stage_three_contact = yes } country_event = { id = UniqueAscensionPerksEvents.3151 } }
				1 = { country_event = { id = UniqueAscensionPerksEvents.3152 } }
				1 = { country_event = { id = UniqueAscensionPerksEvents.3153 } }
				# 5 = { country_event = { id = UniqueAscensionPerksEvents.3154 } }
				# 5 = { country_event = { id = UniqueAscensionPerksEvents.3155 } }
				# 5 = { country_event = { id = UniqueAscensionPerksEvents.3156 } }
			}
		}
	}
	option = { name = "first_contact.400.B" ai_chance = { factor = 0.1 } default_hide_option = yes }
}

country_event = {
	id = UniqueAscensionPerksEvents.3151
	title = "UniqueAscensionPerksEvents.3152.Name"
	desc = "UniqueAscensionPerksEvents.3151.Desc"
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:primitive_creation_country
		planet_background = event_target:primitive_creation_country
		graphical_culture = event_target:primitive_creation_country
		city_level = event_target:primitive_creation_country
		room = event_target:primitive_creation_country.ruler
	}
	immediate = {
		event_target:primitive_creation_country = {
			set_country_flag = early_space_age_contact
			random_owned_pop = { species = { save_event_target_as = primitive_creation_species } }
		}
	}
	option = {
		name = "UniqueAscensionPerksEvents.3151.a"
		allow = {
			any_owned_pop = { is_same_species = event_target:primitive_creation_species }
			NOR = { has_country_flag = early_space_age_contact_same_species_confirmed has_country_flag = early_space_age_contact_not_same_species_confirmed }
		}
		is_dialog_only = yes
		hidden_effect = { set_country_flag = early_space_age_contact_same_species_confirmed }
		add_resource = { influence = 50 }
		response_text = "UniqueAscensionPerksEvents.3151.Same.Species"
	}
	option = {
		name = "UniqueAscensionPerksEvents.3151.b"
		allow = { NOR = { has_country_flag = early_space_age_contact_not_same_species_confirmed has_country_flag = early_space_age_contact_same_species_confirmed } }
		is_dialog_only = yes
		hidden_effect = { set_country_flag = early_space_age_contact_not_same_species_confirmed }
		response_text = "UniqueAscensionPerksEvents.3151.NotSame.Species"
	}
	option = { name = "cara_home_exit" ai_chance = { factor = 0.1 } default_hide_option = yes }
}

country_event = {
	id = UniqueAscensionPerksEvents.3152
	title = "UniqueAscensionPerksEvents.3152.Name"
	desc = "UniqueAscensionPerksEvents.3152.Desc"
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:primitive_creation_country
		planet_background = event_target:primitive_creation_country
		graphical_culture = event_target:primitive_creation_country
		city_level = event_target:primitive_creation_country
		room = event_target:primitive_creation_country.ruler
	}
	option = { name = "precursor.314.a" add_resource = { consumer_goods = 500 } }
	option = { name = "cara_home_exit" ai_chance = { factor = 0.1 } default_hide_option = yes }
}

country_event = {
	id = UniqueAscensionPerksEvents.3153
	title = "UniqueAscensionPerksEvents.3152.Name"
	desc = "UniqueAscensionPerksEvents.3153.Desc"
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:primitive_creation_country
		planet_background = event_target:primitive_creation_country
		graphical_culture = event_target:primitive_creation_country
		city_level = event_target:primitive_creation_country
		room = event_target:primitive_creation_country.ruler
	}
	option = {
		name = "UniqueAscensionPerksEvents.3153.a"
		custom_tooltip = "UniqueAscensionPerksEvents.3153.a.tooltip"
		hidden_effect = {
			create_fleet = {
				name = "Primitive Corvette Fleet"
				settings = { spawn_debris = no }
				effect = {
					set_owner = root
					while = { count = 5 create_ship = { name = random design = "Standard Basic Corvette" } }
					set_location = { target = event_target:primitive_creation_planet distance = 8 angle = random }
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 1000
					set_fleet_flag = recovery_fleet
				}
			}
		}
	}
	option = { name = "cara_home_exit" ai_chance = { factor = 0.1 } default_hide_option = yes }
}

# planet_event = {
# 	id = UniqueAscensionPerksEvents.3160
# 	hide_window = yes
# 	is_triggered_only = yes
#	is_test_event = yes
# 	immediate = {
# 		save_event_target_as = primitive_creation_planet
# 		owner = { save_event_target_as = primitive_creation_country }
# 		primitive_country_into_next_age = yes
# 	}
# }

system_event = {
	id = UniqueAscensionPerksEvents.3161
	title = UniqueAscensionPerksEvents.3161.name
	desc = UniqueAscensionPerksEvents.3161.desc
	picture = GFX_evt_medieval_alien_civilization
	location = starbase
	is_triggered_only = yes
	trigger = { exists = starbase }
	option = {
		name = UniqueAscensionPerksEvents.3161.a
		custom_tooltip = "UniqueAscensionPerksEvents.3161.a.desc"
		hidden_effect = {
			starbase = { destroy_fleet = fleet }
		}
	}
	option = { name = UniqueAscensionPerksEvents.3161.b }
}

# PRE-FTL Technological Progression
country_event = {
	id = UniqueAscensionPerksEvents.3162 # preftl.0
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = primitive
		exists = capital_scope
		exists = capital_scope.observation_outpost_owner
	}
	immediate = {
		switch = {
			trigger = has_pre_ftl_age
			stone_age			= { country_event = { id = preftl.199 } capital_scope.observation_outpost = { add_mission_progress = -1 set_mission = len_society_advance_2 } }
			bronze_age			= { country_event = { id = preftl.299 } capital_scope.observation_outpost = { add_mission_progress = -1 set_mission = len_society_advance_3 } }
			iron_age			= { country_event = { id = preftl.399 } capital_scope.observation_outpost = { add_mission_progress = -1 set_mission = len_society_advance_4 } }
			late_medieval_age	= { country_event = { id = preftl.499 } capital_scope.observation_outpost = { add_mission_progress = -1 set_mission = len_society_advance_5 } }
			renaissance_age		= { country_event = { id = preftl.599 } capital_scope.observation_outpost = { add_mission_progress = -1 set_mission = len_society_advance_6 } }
			steam_age			= { country_event = { id = preftl.699 } capital_scope.observation_outpost = { add_mission_progress = -1 set_mission = len_society_advance_7 } }
			industrial_age		= { country_event = { id = preftl.799 } capital_scope.observation_outpost = { add_mission_progress = -1 set_mission = len_society_advance_8 } }
			machine_age			= { country_event = { id = preftl.899 } capital_scope.observation_outpost = { add_mission_progress = -1 set_mission = len_society_advance_9 } }
			atomic_age			= { country_event = { id = preftl.999 } }
			early_space_age		= { country_event = { id = preftl.1099 } }
		}
	}
	# after = {
	# 	start_situation = { type = pre_ftl_tech_progress_situation }
	# 	destroy_situation = from
	# }
}

planet_event = {
	id = UniqueAscensionPerksEvents.3163
	title = leng_project_event.103.name
	desc = leng_project_event.103.desc
	picture = GFX_evt_alien_cavemen
	show_sound = event_pre_ftl_civilization
	location = this
	is_triggered_only = yes
	# immediate = { set_planet_flag = primitive_creation_done }
	option = { name = EXCELLENT }
}
