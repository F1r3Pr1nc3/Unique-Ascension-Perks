on_game_start = {
	events = {
		UniqueAscensionPerksMenuEvents.100		# has_uap_mod
	}
}

on_single_player_save_game_load = {
	events = {
		UniqueAscensionPerksMenuEvents.100		# has_uap_mod
		# UniqueAscensionPerksEvents.3599	# Temp fix
		UniqueAscensionPerksEvents.3600		# Temp fixes
	}
}

# No scope, like on_game_start
on_monthly_pulse = {
	events = {
		UniqueAscensionPerksEvents.152		# ap_void_expedition
		# UniqueAscensionPerksEvents.1020		# ap_space_domestication Space Domestication
		# UniqueAscensionPerksEvents.239		# ap_defense_sentinels
		UniqueAscensionPerksEvents.4040		# on_action collector
	}
}

# on_monthly_pulse_country = {
# 	events = {
# 		CortanaEvent.0
# 		UniqueAscensionPerksEvents.8041		# ap_nano_drones
# 		UniqueAscensionPerksEvents.4143		# ap_genius_cloning
# 		UniqueAscensionPerksEvents.56		# ap_advanced_security
# 		UniqueAscensionPerksEvents.462		# ap_self_aware_colony
# 		UniqueAscensionPerksEvents.321		# ap_chosen_ruler
# 		UniqueAscensionPerksEvents.266		# ap_civilian_activities
# 	}
# }

# Still managed by UniqueAscensionPerksEvents.8888
# on_half_yearly_pulse = {
# 	events = {
# 		UniqueAscensionPerksEvents.58
# 		UniqueAscensionPerksEvents.132		# ap_eternal_vigilance_project
# 		UniqueAscensionPerksEvents.237		# ap_defense_sentinels
# 		UniqueAscensionPerksEvents.451		# ap_artifact_hunter
# 		UniqueAscensionPerksEvents.8082		# ap_stability_celebration
# 		UniqueAscensionPerksEvents.8787		# Special Subject - Sync relations.
# 		UniqueAscensionPerksEvents.8789		#
# 	}
# }

# No scope, like on_game_start
on_yearly_pulse = {
	events = {
		UniqueAscensionPerksEvents.8080		# on_action collector

		# UniqueAscensionPerksEvents.51		# ap_recycling_drones
		# UniqueAscensionPerksEvents.123		# aggressive_hivemind_project
		# UniqueAscensionPerksEvents.126		# ap_connected_hivemind
		# UniqueAscensionPerksEvents.128		# ap_eternal_vigilance
		# UniqueAscensionPerksEvents.150		# ap_void_expedition_project
		# UniqueAscensionPerksEvents.420		# ap_executive_vigor
		# UniqueAscensionPerksEvents.213		# ap_machine_core
		# # UniqueAscensionPerksEvents.234
		# UniqueAscensionPerksEvents.269		# ap_civilian_activities
		# UniqueAscensionPerksEvents.8068		# ap_megacorp
		# # UniqueAscensionPerksMenuEvents.1000
	}
}
# Merged with on_yearly_pulse
on_yearly_pulse_country = {
	events = {
		# UniqueAscensionPerksEvents.235		# ap_defense_sentinels
		# UniqueAscensionPerksEvents.238		# ap_defense_sentinels
		# UniqueAscensionPerksEvents.351		# ap_wheel_fortune
		# UniqueAscensionPerksEvents.3061		# ap_friendly_nature
		# UniqueAscensionPerksEvents.6163		# ap_robot_command
		# UniqueAscensionPerksEvents.4088		# ap_advanced_government_1
		# UniqueAscensionPerksEvents.464		# ap_self_aware_colony
		# UniqueAscensionPerksEvents.8000		# ap_expansion_infinity
		UniqueAscensionPerksEvents.8061			# ap_advanced_security
	}
}

# No scope, like on_game_start
on_bi_yearly_pulse = {
	events = {
		UniqueAscensionPerksEvents.86			# ap_galaxy_center
		UniqueAscensionPerksEvents.92			# ap_space_merchant
	}
}

on_bi_yearly_pulse_country = {
	events = {
		UniqueAscensionPerksEvents.131			# ap_eternal_vigilance_project
		UniqueAscensionPerksEvents.3142			# ap_primitives_creation
		UniqueAscensionPerksEvents.262			# ap_civilian_activities
		UniqueAscensionPerksEvents.4151			# ap_genius_cloning
		UniqueAscensionPerksEvents.6161			# ap_robot_command
	}
}

on_five_year_pulse_country = {
	events = {
		UniqueAscensionPerksEvents.69			# ap_fallen_disciple
		UniqueAscensionPerksEvents.341			# ap_wheel_fortune
	}
}

# A ship has started a new order
# Root = Ship
# From = Country
on_ship_order = {
	events = {
		UniqueAscensionPerksEvents.2
		UniqueAscensionPerksEvents.11
	}
}

# a new leader is generated for an empire, to be available for recruitment
# scope: country, from: leader
on_leader_spawned = {
	events = {
		UniqueAscensionPerksEvents.39
	}
}

# A country has increased the level of a tech, use last_increased_tech trigger to check tech and level.
# This = Country
on_tech_increased = {
	events = {
		UniqueAscensionPerksEvents.34		# ap_expandable_brain_1
		UniqueAscensionPerksEvents.36		# ap_transcendent_learning
		UniqueAscensionPerksEvents.235		# ap_defense_sentinels
	}
}

# # A pop has finished growing
# # This = Planet scope
# # From = Country
# # fromfrom = Pop
# on_pop_grown = {
# 	events = {
# 		UniqueAscensionPerksEvents.42	# ap_genius_cloning
# 	}
# }
# # A pop has finished assembling
# # This = Planet scope
# # From = Country
# # fromfrom = Pop
# on_pop_assembled = {
# 	events = {
# 		UniqueAscensionPerksEvents.3062	# ap_robot_command
# 	}
# }
# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		UniqueAscensionPerksEvents.44
		UniqueAscensionPerksEvents.4149		# ap_genius_cloning
		UniqueAscensionPerksEvents.6169		# ap_robot_command
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# fromfrom = ship 1
# fromfromfrom = ship 2
on_ship_destroyed_victim = {
	events = {
		UniqueAscensionPerksEvents.48		# Recycling Expeditions
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# fromfrom = ship 1
# fromfromfrom = ship 2
on_ship_destroyed_perp = {
	random_events = {
		43 = 0
		24 = UniqueAscensionPerksEvents.122		# aggressive_hivemind_project
		33 = UniqueAscensionPerksEvents.50		# Recycling Expeditions
	}
}

# This = owner of fleet 1
# From = owner of fleet 2
# fromfrom = fleet 1
# fromfromfrom = fleet 2
on_entering_battle = {
	events = {
		UniqueAscensionPerksEvents.1021
	}
}

# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# fromfrom = fleet 1
# fromfromfrom = fleet 2
on_space_battle_won = {
	events = {
		UniqueAscensionPerksEvents.1021
	}
}

# This = owner of fleet 1 (loser)
# From = owner of fleet 2 (winner)
# fromfrom = fleet 1
# fromfromfrom = fleet 2
on_space_battle_lost = {
	events = {
		UniqueAscensionPerksEvents.1021
	}
}

# A ship has been built
# Root = Ship
# From = Planet
on_ship_built = {
	random_events = {
		50 = 0
		50 = UniqueAscensionPerksEvents.102
	}
}

# This = owner of fleet 1 (combatant)
# From = owner of fleet 2 (destroyed)
# fromfrom = fleet 1
# fromfromfrom = fleet 2
on_fleet_destroyed_perp = {
	# events = {
	# 	UniqueAscensionPerksEvents.1049
	# }
	random_events = {
		65 = 0
		35 = UniqueAscensionPerksEvents.1025		# ap_space_domestication
	}
}

# This = Ship
# From = Disabler Ship
on_ship_disabled = {
	events = {
		UniqueAscensionPerksEvents.3596		# ap_wheel_fortune
	}
}

# This = country
# From = opponent war leader
on_entering_war = {
	events = {
		UniqueAscensionPerksEvents.8785		# sync_subjects_virtual_relation
	}
}

# A war has ended
# Root = Loser
# From = Main Winner
on_war_ended = {
	events = {
		UniqueAscensionPerksEvents.8785		# sync_subjects_virtual_relation
	}
}

# # A war has been won
# # Root = Winner Warleader
# # From = Loser Warleader
# # fromfrom = War
# on_war_won = {
# 	events = {
# 		UniqueAscensionPerksEvents.8785	# sync_subjects_virtual_relation
# 	}
# }
# This = Federation leader
# From = Joining member
on_join_federation = {
	events = {
		UniqueAscensionPerksEvents.8785		# sync_subjects_virtual_relation
	}
}

# This = Federation leader
# From = Leaving member
on_leave_federation = {
	events = {
		UniqueAscensionPerksEvents.8785		# sync_subjects_virtual_relation
	}
}

on_join_alliance = {
	events = {
		UniqueAscensionPerksEvents.8785		# sync_subjects_virtual_relation
	}
}

on_leave_alliance = {
	events = {
		UniqueAscensionPerksEvents.8785		# sync_subjects_virtual_relation
	}
}

# A country is created via create_country or create_rebels
# This = created country
# From = root of context where create_country/create_rebels happens
on_country_created = {
	events = {
		UniqueAscensionPerksEvents.2380
	}
}

# Planets starts being terraformed
# This = Planet
# From = Terraforming country
on_terraforming_begun = {
	events = {
		UniqueAscensionPerksEvents.8999		# Remember special deposits
	}
}

# Planet has been terraformed
# This = Planet
# From = Terraforming country
on_terraforming_complete = {
	events = {
		UniqueAscensionPerksEvents.9000		# Reset special deposits
		UniqueAscensionPerksEvents.303		# ap_pyramidal_society
		UniqueAscensionPerksEvents.4149		# ap_genius_cloning
		UniqueAscensionPerksEvents.6169		# ap_robot_command
		UniqueAscensionPerksEvents.412		# ap_utopian_realisation
	}
}

# From = Country scope
# This = Planet scope
on_planet_ownerless = {
	events = {
		UniqueAscensionPerksEvents.302		# ap_pyramidal_society
		UniqueAscensionPerksEvents.4149		# ap_genius_cloning
		UniqueAscensionPerksEvents.6169		# ap_robot_command
	}
}

# Planet has taken damage from orbital bombardment.
# This = Planet
# From = Bombarder
on_planet_bombarded = {
	random_events = {
		85 = 0
		5 = UniqueAscensionPerksEvents.311	# ap_orbital_surgical_strike
		5 = UniqueAscensionPerksEvents.4149		# ap_genius_cloning
		5 = UniqueAscensionPerksEvents.6169		# ap_robot_command
	}
}

# A fleet executes a move order to exit borders
# Scope = Fleet
# From = Origin System
# fromfrom = Destination System
on_crossing_border = {
	events = {
		UniqueAscensionPerksEvents.8062		# Sync virtual relatio
	}
}

# A ship has surveyed a planet.
# Scope = Ship
# From = Planet
# on_survey = {
# 	events = {
# 		# UniqueAscensionPerksEvents.431
# 	}
# }
# A ship is done surveying the last unsurveyed planet in a system
# Scope = ship
# From = system
on_system_survey_ship = {
	events = {
		# UniqueAscensionPerksEvents.437	# ap_antimatter (already very powerfull)
		UniqueAscensionPerksEvents.531		# ap_expansionist_development
	}
}

# This = destroyed country
# From = optional, destroyer (country)
# on_country_destroyed = {
# 	events = {
# 		TODO UniqueAscensionPerksEvents.275	# Sector Z749
# 	}
# }
# Executed when a country picks an ascension perk.
# THIS = country
on_ascension_perk_picked = {
	events = {
		UniqueAscensionPerksEvents.30		# ap_expandable_brain_1 Expandable Knowledge
	}
}
