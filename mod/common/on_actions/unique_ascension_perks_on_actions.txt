# No scope, like on_game_start
on_monthly_pulse = {
	events = {
		UniqueAscensionPerksEvents.152
		UniqueAscensionPerksEvents.213
		UniqueAscensionPerksEvents.1022
	}
}

# No scope, like on_game_start
on_yearly_pulse = {
	events = {
		UniqueAscensionPerksEvents.30 # ap_expandable_brain_2
		UniqueAscensionPerksEvents.51 # ap_recycling_drones
		UniqueAscensionPerksEvents.123 # aggressive_hivemind_project
		UniqueAscensionPerksEvents.126 # ap_connected_hivemind
		UniqueAscensionPerksEvents.128
		UniqueAscensionPerksEvents.150
		# UniqueAscensionPerksEvents.234
		UniqueAscensionPerksEvents.420
		UniqueAscensionPerksEvents.8068
		# UniqueAscensionPerksMenuEvents.1000
	}
}

on_yearly_pulse_country = {
	events = {
		UniqueAscensionPerksEvents.235
	}
}

# No scope, like on_game_start
on_bi_yearly_pulse = {
	events = {
		UniqueAscensionPerksEvents.86 # ap_galaxy_center
		UniqueAscensionPerksEvents.92
	}
}

# A ship has started a new order
# Root = Ship
# From = Country
on_ship_order = {
	events = {
		UniqueAscensionPerksEvents.2
		UniqueAscensionPerksEvents.11
	}
}

# a new leader is generated for an empire, to be available for recruitment
# scope: country, from: leader
on_leader_spawned = {
	events = {
		UniqueAscensionPerksEvents.39
	}
}

# A country has increased the level of a tech, use last_increased_tech trigger to check tech and level.
# This = Country
on_tech_increased = {
	events = {
		UniqueAscensionPerksEvents.34
		UniqueAscensionPerksEvents.36
	}
}

# A pop has finished growing
# This = Planet scope
# From = Country
# FromFrom = Pop
# on_pop_grown = {
# 	events = {
# 		UniqueAscensionPerksEvents.42 # ap_genius_cloning
# 	}
# }

# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		UniqueAscensionPerksEvents.44
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_victim = {
	events = {
		UniqueAscensionPerksEvents.48 # Recycling Expeditions
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_perp = {
	events = {
		UniqueAscensionPerksEvents.50 # Recycling Expeditions
		UniqueAscensionPerksEvents.122 # aggressive_hivemind_project
		UniqueAscensionPerksEvents.1049
	}
}

# This = owner of fleet 1
# From = owner of fleet 2
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_entering_battle = {
	events = {
		UniqueAscensionPerksEvents.1021
	}
}

# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_won = {
	events = {
		UniqueAscensionPerksEvents.1021
	}
}

# This = owner of fleet 1 (loser)
# From = owner of fleet 2 (winner)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_lost = {
	events = {
		UniqueAscensionPerksEvents.1021
	}
}

# A ship has been built
# Root = Ship
# From = Planet
on_ship_built = {
	events = {
		UniqueAscensionPerksEvents.102
	}
}

# This = owner of fleet 1 (combatant)
# From = owner of fleet 2 (destroyed)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_perp = {
	events = {
		UniqueAscensionPerksEvents.1025
	}
}

# Planet has been terraformed
# This = Planet
# From = Terraforming country
on_terraforming_complete = {
	events = {
		#UniqueAscensionPerksEvents.9000
	}
}

# Planet has taken damage from orbital bombardment
# This = Planet
# From = Bombarder
on_planet_bombarded = {
	events = {
		UniqueAscensionPerksEvents.311
	}
}

# A ship has surveyed a planet.
# Scope = Ship
# From = Planet
# on_survey = {
# 	events = {
# 		# UniqueAscensionPerksEvents.431
# 	}
# }

# A ship is done surveying the last unsurveyed planet in a system
# Scope = ship
# From = system
on_system_survey_ship = {
	events = {
		UniqueAscensionPerksEvents.437
		UniqueAscensionPerksEvents.531
	}
}

#This = destroyed country
#From = optional, destroyer (country)
on_country_destroyed = {
	events = {
		UniqueAscensionPerksEvents.275 # Sector Z749
	}
}
