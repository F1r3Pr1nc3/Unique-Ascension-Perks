
# To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
# IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 # default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)

# 	# All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	# (Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	# They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					# Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	# Only applied if this trigger is true.
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	# This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		# Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				# Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					# Allows all numerical operations
# 		mult = 5 					# Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops.
# 	}
# }

# pops_count = {
# 	base = 0
# 	complex_trigger_modifier = {
# 		trigger = count_owned_pop
# 		trigger_scope = owner
# 		parameters = {
# 			limit = { is_enslaved = no is_being_purged = no is_robot_pop = no happiness > 0.7 }
# 		}
# 		mode = add
# 		# mult = 0.1
# 	}
# 	max = 900
# 	divide = 10
# 	round = yes
# }

# pops_enslaved_count = {
# 	base = 0
# 	complex_trigger_modifier = {
# 		trigger = count_owned_pop
# 		trigger_scope = owner
# 		parameters = {
# 			limit = { is_enslaved = yes }
# 		}
# 		mode = add
# 		# mult = 0.1
# 	}
# 	divide = 10
# 	max = 1000
# 	round = yes
# }

hivemind_reserves = {
	base = 1
	max = 1
	min = 0.2
	complex_trigger_modifier = {
		trigger = count_deposit # count_deposits not working
		trigger_scope = planet
		parameters = {
			# type = d_hivemind_reserve
			limit = { is_deposit_type = d_hivemind_reserve }
		}
		mode = mult
		mult = 0.81 # With 7 # 0.9 with 14
	}
}

# num_ethic_pop_on_planet = {
# 	base = 1
# 	complex_trigger_modifier = {
# 		trigger_scope = planet
# 		trigger = count_owned_pop
# 		parameters = {
# 			limit = { pop_has_right_ethics = yes }
# 		}
# 		mode = add
# 	}
# }

num_non_robot_pop = {
	complex_trigger_modifier = {
		trigger_scope = planet
		trigger = count_owned_pop
		parameters = {
			limit = { is_robot_pop = no }
		}
		mode = add
	}
}

num_robot_pop = {
	complex_trigger_modifier = {
		trigger_scope = planet
		trigger = count_owned_pop
		parameters = {
			limit = { is_robot_pop = yes }
		}
		mode = add
	}
}
